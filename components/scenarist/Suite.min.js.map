{"version":3,"sources":["Suite.js"],"names":["root","factory","define","amd","Suite","exports","_typeof","module","Function","toString","match","Error","e","_createClass","require","default","_classCallCheck","_possibleConstructorReturn","_inherits","this","target","description","arguments","length","undefined","_name","constructor","scope","classes","leafClasses","leafScenarios","branchScenarios","mixins","scopes","classSyntaxSupport","arrowFunctionSupport","key","get","value","name","replace","toLowerCase","f","allowUnicodeNames","message","tests","self","test","parseInt","split","map","getChain","proto","chain","unshift","Object","getPrototypeOf","isLeaf","scenario","i","debug","console","log","branch","_this","shift","join","generateClass","Array","isArray","forEach","item","generateClasses","prop","push","pop","_this2","expression","_checkIdentifier","allowLooseNaming","c","prefix","window","subclass","base","__BASE_CLASS__","_BASE_CLASS__","__SUBCLASS__","__proto__","apply","_BASE_CLASS__2","updateLeafClasses","regeneratorRuntime","async","_context","prev","next","stop","element","type","trigger","condition","Promise","resolve","addEventListener","onEvent","event","Polymer","dom","rootTarget","removeEventListener","mark","steps","wrap","_context2","hasOwnProperty","uncamel","iteration","operation","checkpoint","ctor","delegateYield","_context3","reject","testSuites","testClasses","suite","describe","_this5","testInstances","s","all","instance","index","_context4","abrupt","run","then","v","catch","results","filter","MultiError","_Error","errors","_this6","call","exception","checkExceptionHandler","overrideToString","func","getOwnPropertyDescriptor","_loop","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","step","_context9","suiteSetup","before","_context5","awrap","setup","_loop2","parameters","it","_context6","skipAfterFailure","__failed","skip","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Symbol","iterator","done","err","return","_context7","t0","finish","t1","suiteTeardown","after","_context8","teardown","set","last","o","keys","n","reduce","l","reconnectable","count","_permute","targets","len","j","swap","append","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","sub","result","list","_context10","cursor","k","tmp","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4"],"mappings":"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","file":"Suite.min.js","sourcesContent":["/*\n@license https://github.com/t2ym/scenarist/blob/master/LICENSE.md\nCopyright (c) 2016, Tetsuya Mori <t2y3141592@gmail.com>. All rights reserved.\n*/\n\n(function (root, factory) {\n\n  'use strict';\n\n  /* istanbul ignore if: AMD is not tested */\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.Suite = root.Suite || factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n    try {\n      new Function('return class $$A$$ {}');\n      if (!module.exports.toString().match(/^class /)) {\n        throw new Error('Suite.min.js requires babel-runtime');\n      }\n    }\n    catch (e) {\n      // Supply Babel runtime helpers\n      module.exports._createClass = module.exports._createClass || require('babel-runtime/helpers/_create-class.js').default;\n      module.exports._classCallCheck = module.exports._classCallCheck || require('babel-runtime/helpers/_class-call-check.js').default;\n      module.exports._possibleConstructorReturn = module.exports._possibleConstructorReturn || require('babel-runtime/helpers/_possible-constructor-return.js').default;\n      module.exports._inherits = module.exports._inherits || require('babel-runtime/helpers/_inherits.js').default;\n    }\n  } else {\n    // Browser globals\n    root.Suite = root.Suite || factory();\n  }\n\n}(this, function () {\n// UMD Definition above, do not remove this line\n  'use strict';\n\nclass Suite {\n  static get reconnectable() { return true; }\n  static get skipAfterFailure() { return false; }\n  constructor(target, description = target + ' suite') {\n    if (Suite._name(this.constructor) === 'Suite') {\n      // suite instance\n      this.scope = target || '';\n      this.description = description;\n      this.classes = {};\n      this.leafClasses = {};\n      this.leafScenarios = {};\n      this.branchScenarios = {};\n      this.mixins = {};\n      this.constructor.scopes = this.constructor.scopes || {};\n      this.constructor.scopes[this.scope] = this;\n      this.classSyntaxSupport = true;\n      this.arrowFunctionSupport = true;\n      try {\n        new Function('return class A {}');\n      }\n      catch (e) {\n        \n        this.classSyntaxSupport = false;\n      }\n      if (!Suite.toString().match(/^class /)) {\n        \n        this.classSyntaxSupport = false; // Running as Suite.min.js\n      }\n      try {\n        new Function('return () => 1');\n      }\n      catch (e) {\n        \n        this.arrowFunctionSupport = false;\n      }\n    }\n    else {\n      // test instance\n      this.target = target;\n    }\n  }\n  uncamel(name) {\n    return name.replace(/([A-Z])/g, ' $1').replace(/_/g, ' ').replace(/[ ]{1,}/g, ' ').replace(/^ /, '').toLowerCase();\n  }\n  static _name(func) {\n    return (func.hasOwnProperty('name')\n      ? func.name\n      : func.toString().replace(/^[\\S\\s]*?function\\s*/, \"\").replace(/[\\s\\(\\/][\\S\\s]+$/, \"\")).replace(/^_?class$/, '');\n  }\n  _checkIdentifier(name) {\n    try {\n      let f = (new Function('return function ' + name + ' () {}'))();\n      if (f.name !== name || (!this.constructor.allowUnicodeNames && !f.name.match(/^[$\\w]*$/))) {\n        throw new Error(name + ' is defined as ' + f.name);\n      }\n    }\n    catch (e) {\n      throw new Error(this.constructor.name + '.' + this.scope + ':_checkIdentifier ' + name + ' is not a valid identifier ' + e.message);\n    }\n  }\n  set test(value) {\n    if (typeof value === 'function') {\n      let name = Suite._name(value);\n      if (name) {\n        // test class\n        if (this.classes[name]) {\n          // test class with the name already exists\n          throw new Error(this.constructor.name + '.' + this.scope + ': class ' + name + ' already exists');\n        }\n        else {\n          // register a new test class with the name\n          this.classes[name] = value;\n          this.updateLeafClasses(value);\n        }\n      }\n      else {\n        // test class mixin\n        name = Suite._name(value(null));\n        if (name) {\n          if (this.mixins[name]) {\n            // test class mixin with the name already exists\n            throw new Error(this.constructor.name + '.' + this.scope + ': class mixin ' + name + ' already exists');\n          }\n          else {\n            // register a new test class mixin with the name\n            this.mixins[name] = value;\n          }\n        }\n        else {\n          // no name for the test class mixin\n          throw new Error(this.constructor.name + '.' + this.scope + ': class mixin has no name ' + value.toString());\n        }\n      }\n    }\n    else if (typeof value === 'object') {\n      if (value) {\n        // branch object\n        this.generateClasses(value, []);\n      }\n      else {\n        throw new Error(this.constructor.name + '.' + this.scope + ': null object is not expected');\n      }\n    }\n  }\n  get test() {\n    let last;\n    // [ 'UnreconnectableTest', 'ReconnectableTest,ReconnectableTest,...', 'UnreconnectableTest', ...]\n    return (o => Object.keys(o).map(n => o[n]))(this.leafClasses)\n      .reduce((l, c) => ((c.reconnectable && last && last[0].reconnectable ? last.push(c) : l.push(last = [c])), l), [])\n      .map(l => l.map(c => Suite._name(c)).join(','));\n  }\n  testClasses(tests) {\n    let self = this;\n    return (typeof tests === 'number' || tests.match(/^[0-9]$/) ? self.test[parseInt(tests)] : tests).split(/,/).map((name) => {\n      if (!self.classes[name]) {\n        throw new Error('Suite.' + self.scope + ': Test ' + name + ' is not defined');\n      }\n      return self.classes[name];\n    });\n  }\n  updateLeafClasses(value) {\n    let name = Suite._name(value);\n    let isLeaf = true;\n    let scenario = '';\n    function getChain(proto) {\n      let chain = [];\n      while (Suite._name(proto) && Suite._name(proto) !== 'Suite') {\n        chain.unshift(Suite._name(proto));\n        proto = Object.getPrototypeOf(proto);\n      }\n      return chain;\n    }\n    let chain = getChain(value);\n    for (let i in chain) {\n      scenario = scenario ? scenario + ',' + chain[i] : chain[i];\n      if (i < chain.length - 1) {\n        if (!this.branchScenarios[scenario]) {\n          this.branchScenarios[scenario] = true;\n        }\n        if (this.leafClasses[chain[i]] &&\n            this.leafScenarios[chain[i]] === scenario) {\n          if (this.constructor.debug) { console.log('updateLeafClasses ' + name + ': trim a non-leaf class ' + chain[i] + ' with scenario ' + scenario); }\n          delete this.leafClasses[chain[i]];\n          delete this.leafScenarios[chain[i]];\n        }\n      }\n      else {\n        if (this.branchScenarios[scenario]) {\n          if (this.constructor.debug) { console.log('updateLeafClasses ' + name + ': ' + scenario + ' is not a leaf'); }\n          isLeaf = false;\n        }\n      }\n    }\n    if (isLeaf) {\n      this.leafClasses[name] = value;\n      this.leafScenarios[name] = scenario;\n    }\n  }\n  generateClasses(branch, chain) {\n    if (typeof branch === 'string') {\n      let description = branch.split(/;/);\n      if (description.length > 1) {\n        branch = description.shift();\n        description = description.join(';').replace(/^[\\s]*/, '');\n      }\n      else {\n        description = '';\n      }\n      if (this.constructor.debug) { console.log('string', branch || chain[chain.length - 1], chain, description); }\n      this.generateClass(branch, chain, description);\n    }\n    else if (typeof branch === 'object' && !Array.isArray(branch)) {\n      if (branch) {\n        for (let prop in branch) {\n          chain.push(prop);\n          this.generateClasses(branch[prop], chain);\n          chain.pop();\n        }\n      }\n      else {\n        if (this.constructor.debug) { console.log('null', branch, chain); }\n        this.generateClass(branch, chain);\n      }\n    }\n    else if (typeof branch === 'object' && Array.isArray(branch)) {\n      branch.forEach((item) => {\n        this.generateClasses(item, chain);\n      });\n    }\n    else {\n      throw new Error(this.constructor.name + '.' + this.scope + ': unknown branch type ' + typeof branch + branch);\n    }\n  }\n  generateClass(name, chain, description) {\n    let self = this;\n    let expression;\n    if (!(chain.length >= (chain[0] ? 1 : 2))) {\n      throw new Error(this.constructor.name + '.' + this.scope + ':generateClass invalid chain.length ' + chain.length);\n    }\n    if (!name) {\n      name = chain[chain.length - 1];\n    }\n    this._checkIdentifier(name);\n    if (!chain[0]) {\n      // class mixin\n      if (self.mixins[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + name + ' already exists');\n      }\n      if (!self.constructor.allowLooseNaming && self.classes[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass class ' + name + ' already exists');        \n      }\n      chain.forEach((c, i) => {\n        self._checkIdentifier(c);\n        if (i === 0) {\n          expression = 'base';\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      expression = self.arrowFunctionSupport\n        ? 'return (base) => ' + expression\n        : 'return function (base) { return ' + expression + '; }';\n      self.mixins[name] = (new Function('self', expression))(self);\n      if (self.constructor.debug) { console.log('generateClass mixins.' + name + ' = ' + expression); }\n    }\n    else {\n      // class\n      if (this.classes[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass class ' + name + ' already exists');\n      }\n      if (!self.constructor.allowLooseNaming && this.mixins[name] && chain[chain.length - 1] !== name) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        self._checkIdentifier(c);\n        if (i === 0) {\n          if (self.classes[c]) {\n            expression = 'self.classes.' + c;\n          }\n          else if ((new Function(self.constructor.name, 'return (typeof ' + c + ' === \"function\" && (new ' + c + '()) instanceof ' + self.constructor.name + ')'))(self.constructor)) {\n            expression = c;\n          }\n          else {\n            throw new Error(this.constructor.name + '.' + this.scope + ':generateClass global test class ' + c + ' does not exist');\n          }\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      if (description) {\n        description = description.replace(/\"/g,'\\\\\"').replace(/\\n/g, ' ');\n      }\n      let prefix = !this.classSyntaxSupport && typeof Suite._createClass === 'function' && typeof window !== 'object' ? 'self.constructor.' : '';\n      expression = chain.length === 1 && name === expression\n        ? 'return ' + name\n        : name === chain[chain.length - 1]\n          ? 'return ' + expression\n          : self.classSyntaxSupport\n            ? 'return class ' + name + ' extends ' + expression + (description ? ' { get description() { return \"' + description + '\"; } }' : ' {}')\n            : (function (subclass, base, description) { // generate ES5 class by manipulating transpiled func.toString()\n                return 'return (' +\n                  (() => { /* istanbul ignore next */\n                    return description\n                    ? function (__BASE_CLASS__) { return class __SUBCLASS__ extends __BASE_CLASS__ { get description() { return 314159265358; } } }\n                    : function (__BASE_CLASS__) { return class __SUBCLASS__ extends __BASE_CLASS__ {} }\n                  })().toString()\n                    .replace(/__cov_[^. ]*[.][a-z]\\[\\'[0-9]*\\'\\](\\[[0-9]*\\])?\\+\\+[;,]?/g, '') // trim istanbul coverage counters\n                    .replace(/__SUBCLASS__/g, subclass)\n                    .replace(/_inherits|_classCallCheck|_createClass|_possibleConstructorReturn/g, prefix + '$&')\n                    .replace(/ 314159265358;?/g, ' \"' + description + '\";')\n                  + ')(' + base + ');'\n              })(name, expression, description);\n      self.classes[name] = (new Function('self', expression))(self);\n      self.updateLeafClasses(self.classes[name]);\n      if (self.constructor.debug) { console.log('generateClass classes.' + name + ' = ' + expression); }\n    }\n  }\n  static repeat(target, count, subclass) {\n    let scenario = {};\n    if (count < 1) {\n      scenario = subclass;\n    }\n    else {\n      scenario[target] = subclass;\n      count--;\n      while (count-- > 0) {\n        scenario = {\n          [target]: scenario\n        };\n      }\n    }\n    return scenario;\n  }\n  static * _permute(targets, i = 0, result = {}, subclass = (list) => list.join('Then')) {\n    let len = targets.length;\n    let j;\n    function swap() {\n      if (j !== i) {\n        let tmp = targets[i];\n        targets[i] = targets[j];\n        targets[j] = tmp;\n      }\n    }\n    function append() {\n      // TODO: cache cursor\n      let cursor = result;\n      for (let k = 0; k < len; k++) {\n        if (!cursor[targets[k]]) {\n          if (k >= len - 1) {\n            cursor[targets[k]] = subclass(targets);\n          }\n          else {\n            cursor[targets[k]] = {};\n          }\n        }\n        cursor = cursor[targets[k]];\n      }\n    }\n    if (i >= len - 1) {\n      yield targets;\n      append();\n    }\n    else {\n      for (j = i; j < len; j++) {\n        swap();\n        for (let sub of this._permute(targets, i + 1, result)) {\n          yield targets;\n          append();\n        }\n        swap();\n      }\n    }\n  }\n  static permute(targets, subclass) {\n    let result = {};\n    for (let chain of this._permute(targets, 0, result, subclass)) {}\n    return result;\n  }\n  async setup() {\n  }\n  forEvent(element, type, trigger, condition) {\n    return new Promise(resolve => {\n      element.addEventListener(type, function onEvent(event) {\n        if (!condition ||\n            (typeof condition === 'boolean' && condition && Polymer.dom(event).rootTarget === element) ||\n            (typeof condition === 'function' && condition(element, type, event))) {\n          element.removeEventListener(type, onEvent);\n          resolve(event);\n        }\n      });\n      if (trigger) {\n        trigger();\n      }\n    })\n  }\n  * scenario() {\n    // trick to unveil overridden methods\n    let steps = [];\n    let proto = Object.getPrototypeOf(this);\n    while (proto.constructor.name && proto.constructor.name !== 'Object') {\n      steps.unshift({\n        name: proto.hasOwnProperty('description') ? proto.description : this.uncamel(Suite._name(proto.constructor)),\n        iteration: proto.hasOwnProperty('iteration') ? proto.iteration : undefined,\n        operation: proto.hasOwnProperty('operation') ? proto.operation : undefined,\n        checkpoint: proto.hasOwnProperty('checkpoint') ? proto.checkpoint: undefined,\n        ctor: proto.constructor\n      });\n      proto = Object.getPrototypeOf(proto);\n    }\n    yield * steps;\n  }\n  async teardown() {\n  }\n  run(classes, target) { // async method\n    let self = this;\n    if (Suite._name(self.constructor) === 'Suite') {\n      return new Promise((resolve, reject) => {\n        try {\n          // Suite Runner\n          let testSuites = [];\n          if (typeof classes === 'number' || typeof classes === 'string') {\n            // Number 0\n            // Number string '0'\n            // CSV string 'Test1,Test2'\n            testSuites = self.testClasses(classes);\n          }\n          else if (typeof classes === 'object' && Array.isArray(classes)) {\n            // String Array [ 'Test1', 'Test2' ]\n            // Class Array [ Test1, Test2 ]\n            // TODO: handle errors if item is neither a string nor a class\n            testSuites = classes.map((item) => typeof item === 'string' ? self.classes[item] : item);\n          }\n          else if (typeof classes === 'object' && !Array.isArray(classes) && classes) {\n            // Object { Test1: Test1, Test2: Test2 } - property names are discarded\n            for (let c in classes) {\n              testSuites.push(classes[c]);\n            }\n          }\n          (typeof suite === 'function' ? suite : describe)(self.description || (self.scope + ' suite'), function() {\n            let testInstances = testSuites.map(s => [ Suite._name(s), new s(target) ]);\n            Promise.all(testInstances.map(async (instance, index) => instance[1].run()\n                .then(v => testInstances[index][2] = v)\n                .catch(e => testInstances[index][2] = e)))\n              .then(results => {\n                if (results.filter(i => i instanceof Error).length > 0) {\n                  class MultiError extends Error {\n                    constructor(message, errors) {\n                      super(message);\n                      this.errors = errors;\n                    }\n                  }\n                  let errors = new MultiError(self.constructor.name + '.' + self.scope +\n                    '.run(' + testInstances.map(item => item[0]).join(',') + '): ' +\n                    'exception(s) thrown. See .errors for details', testInstances);\n                  if (self.constructor.debug) { console.log(self.description + ': exception(s) thrown for ', classes, errors, errors.errors); }\n                  reject(errors); // reject the promise for run()\n                }\n                else {\n                  if (self.constructor.debug) { console.log(self.description + ': loaded for ', classes); }\n                  resolve(); // resolve the promise for run()\n                }\n              });\n              // no rejections to catch as they have been caught\n          });\n        }\n        catch (e) {\n          // catch exceptions outside of the Promise.all()\n          reject(e); // reject the promise for run()\n        }\n      })\n    }\n    else {\n      return new Promise((resolve, reject) => {\n        let exception;\n        let checkExceptionHandler = (reject, exception) => typeof self.exception === 'function' ? self.exception(reject, exception) : (reject(exception), true);\n        try {\n          // Scenario Runner\n          let overrideToString = (func, ctor) => { func.toString = () => ctor.toString(); return func; };\n          (typeof suite === 'function' ? suite : describe)(Object.getOwnPropertyDescriptor(Object.getPrototypeOf(self), 'description') ? self.description : self.uncamel(Suite._name(self.constructor)), async function () {\n            (typeof suiteSetup === 'function' ? suiteSetup : before)(async function () {\n              await self.setup();\n            });\n\n            try {\n              for (let step of self.scenario()) {\n                if (step.operation || step.checkpoint) {\n                  if (step.iteration) {\n                    for (let parameters of step.iteration.apply(self)) {\n                      (typeof test === 'function' ? test : it)(parameters.name ?\n                            (typeof parameters.name === 'function' ? parameters.name(parameters) : parameters.name)\n                            : step.name, overrideToString(async function() {\n                        if (self.constructor.skipAfterFailure && self.__failed) {\n                          return this.skip();\n                        }\n                        else {\n                          self.__failed = true;\n                          if (step.operation) {\n                            await step.operation.call(self, parameters);\n                          }\n                          if (step.checkpoint) {\n                            await step.checkpoint.call(self, parameters);\n                          }\n                          self.__failed = false;\n                        }\n                      }, step.ctor));\n                    }\n                  }\n                  else {\n                    (typeof test === 'function' ? test : it)(step.name, overrideToString(async function() {\n                      if (self.constructor.skipAfterFailure && self.__failed) {\n                        return this.skip();\n                      }\n                      else {\n                        self.__failed = true;\n                        if (step.operation) {\n                          await step.operation.call(self);\n                        }\n                        if (step.checkpoint) {\n                          await step.checkpoint.call(self);\n                        }\n                        self.__failed = false;\n                      }\n                    }, step.ctor));\n                  }\n                }\n              }\n            }\n            catch (e) {\n              // catch exceptions within suite callback but outside of test callbacks\n              exception = checkExceptionHandler(reject, e);\n            }\n\n            (typeof suiteTeardown === 'function' ? suiteTeardown : after)(async function () {\n              await self.teardown();\n            });\n          });\n\n          if (!exception) {\n            resolve(); // resolve the promise for run()\n          }\n        }\n        catch (e) {\n          // catch exceptions outside of suite() callback\n          exception = checkExceptionHandler(reject, e);\n        }\n      });\n    }\n  }\n}\n\n  return Suite;\n})); // UMD Definition\n"]}