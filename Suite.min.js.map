{"version":3,"sources":["Suite.js"],"names":["root","factory","define","amd","Suite","exports","_typeof","module","e","_createClass","require","default","_classCallCheck","_possibleConstructorReturn","_inherits","target","description","arguments","length","undefined","this","_name","constructor","scope","classes","leafClasses","branchScenarios","mixins","scopes","classSyntaxSupport","arrowFunctionSupport","Function","key","get","value","name","replace","toLowerCase","tests","chain","generateClasses","branch","match","self","test","split","map","Error","generateClass","proto","forEach","isLeaf","scenario","unshift","Object","getPrototypeOf","i","expression","_this","shift","join","console","debug","log","Array","isArray","item","prop","push","c","prefix","resolve","trigger","_this2","steps","operation","checkpoint","hasOwnProperty","window","updateLeafClasses","element","addEventListener","event","condition","Polymer","regeneratorRuntime","async","_context","prev","next","stop","type","Promise","onEvent","dom","rootTarget","removeEventListener","mark","wrap","_context2","skipAfterFailure","__failed","iteration","delegateYield","_context3","_context10","testSuites","testClasses","suite","_this3","all","s","_context4","abrupt","run","then","getOwnPropertyDescriptor","uncamel","_loop","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","step","_context9","suiteSetup","_context5","awrap","setup","_loop2","parameters","_context7","skip","call","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","apply","Symbol","iterator","done","err","return","_context8","t0","finish","suiteTeardown","_context6","teardown","set","toString","list","reconnectableList","reconnectable","last","l","func","count","subclass","_permute","targets","len","j","swap","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","sub","result","_context11","cursor","k","tmp","append","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4"],"mappings":"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","file":"Suite.min.js","sourcesContent":["/*\n@license https://github.com/t2ym/scenarist/blob/master/LICENSE.md\nCopyright (c) 2016, Tetsuya Mori <t2y3141592@gmail.com>. All rights reserved.\n*/\n\n(function (root, factory) {\n\n  'use strict';\n\n  /* istanbul ignore if: AMD is not tested */\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.Suite = root.Suite || factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n    try {\n      new Function('return class $$A$$ {}');\n    }\n    catch (e) {\n      // Supply Babel runtime helpers\n      module.exports._createClass = module.exports._createClass || require('babel-runtime/helpers/_create-class.js').default;\n      module.exports._classCallCheck = module.exports._classCallCheck || require('babel-runtime/helpers/_class-call-check.js').default;\n      module.exports._possibleConstructorReturn = module.exports._possibleConstructorReturn || require('babel-runtime/helpers/_possible-constructor-return.js').default;\n      module.exports._inherits = module.exports._inherits || require('babel-runtime/helpers/_inherits.js').default;\n    }\n  } else {\n    // Browser globals\n    root.Suite = root.Suite || factory();\n  }\n\n}(this, function () {\n// UMD Definition above, do not remove this line\n  'use strict';\n\nclass Suite {\n  static get reconnectable() { return true; }\n  static get skipAfterFailure() { return false; }\n  constructor(target, description = target + ' suite') {\n    if (Suite._name(this.constructor) === 'Suite') {\n      // suite instance\n      this.scope = target || '';\n      this.description = description;\n      this.classes = {};\n      this.leafClasses = {};\n      this.branchScenarios = {};\n      this.mixins = {};\n      this.constructor.scopes = this.constructor.scopes || {};\n      this.constructor.scopes[this.scope] = this;\n      this.classSyntaxSupport = true;\n      this.arrowFunctionSupport = true;\n      try {\n        new Function('return class A {}');\n      }\n      catch (e) {\n        this.classSyntaxSupport = false;\n      }\n      try {\n        new Function('return () => 1');\n      }\n      catch (e) {\n        this.arrowFunctionSupport = false;\n      }\n    }\n    else {\n      // test instance\n      this.target = target;\n    }\n  }\n  uncamel(name) {\n    return name\n      // insert a hyphen between lower & upper\n      .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n      // space before last upper in a sequence followed by lower\n      .replace(/\\b([A-Z]+)([A-Z])([a-z0-9])/, '$1 $2$3')\n      // lowercase\n      .toLowerCase();\n  }\n  static _name(func) {\n    return func.hasOwnProperty('name')\n      ? func.name\n      : func.toString().replace(/^[\\S\\s]*?function\\s*/, \"\").replace(/[\\s\\(\\/][\\S\\s]+$/, \"\");\n  }\n  set test(value) {\n    if (typeof value === 'function') {\n      let name = Suite._name(value);\n      if (name) {\n        // test class\n        if (this.classes[name]) {\n          // test class with the name already exists\n          throw new Error(this.constructor.name + '.' + this.scope + ': class ' + value.name + ' already exists');\n        }\n        else {\n          // register a new test class with the name\n          this.classes[name] = value;\n          this.updateLeafClasses(value);\n        }\n      }\n      else {\n        // test class mixin\n        name = Suite._name(value(null));\n        if (name) {\n          if (this.mixins[name]) {\n            // test class mixin with the name already exists\n            throw new Error(this.constructor.name + '.' + this.scope + ': class mixin ' + name + ' already exists');\n          }\n          else {\n            // register a new test class mixin with the name\n            this.mixins[name] = value;\n          }\n        }\n        else {\n          // no name for the test class mixin\n          throw new Error(this.constructor.name + '.' + this.scope + ': class mixin has no name ' + value.toString());\n        }\n      }\n    }\n    else if (typeof value === 'object') {\n      if (value) {\n        // branch object\n        this.generateClasses(value, []);\n      }\n      else {\n        throw new Error(this.constructor.name + '.' + this.scope + ': null object is not expected');\n      }\n    }\n  }\n  get test() {\n    let list = [];\n    for (let c in this.leafClasses) {\n      list.push(this.leafClasses[c]);\n    }\n    let reconnectableList = [];\n    for (let i in list) {\n      if (list[i].reconnectable) {\n        if (reconnectableList.length === 0) {\n          reconnectableList.push([list[i]]);\n        }\n        else {\n          let last = reconnectableList[reconnectableList.length - 1];\n          if (last.length === 0) {\n            last.push(list[i]);\n          }\n          else {\n            if (last[last.length - 1].reconnectable) {\n              last.push(list[i]);\n            }\n            else {\n              reconnectableList.push([list[i]]);\n            }\n          }\n        }\n      }\n      else {\n        reconnectableList.push([list[i]]);\n      }\n    }\n    // [ 'UnreconnectableTest', 'ReconnectableTest,ReconnectableTest,...', 'UnreconnectableTest', ...]\n    return reconnectableList.map(l => l.map(c => Suite._name(c)).join(','));\n  }\n  testClasses(tests) {\n    let self = this;\n    return (typeof tests === 'number' || tests.match(/^[0-9]$/) ? self.test[tests] : tests).split(/,/).map((name) => {\n      if (!self.classes[name]) {\n        throw new Error('Suite.' + self.scope + ': Test ' + name + ' is not defined');\n      }\n      return self.classes[name];\n    });\n  }\n  updateLeafClasses(value) {\n    let proto = value;\n    let chain = [];\n    let name = Suite._name(proto);\n    let isLeaf = true;\n    let scenario = '';\n    while (Suite._name(proto) && Suite._name(proto) !== 'Suite') {\n      chain.unshift(Suite._name(proto));\n      proto = Object.getPrototypeOf(proto);\n    }\n    for (let i in chain) {\n      scenario = scenario ? scenario + ',' + chain[i] : chain[i];\n      if (i < chain.length - 1) {\n        if (!this.branchScenarios[scenario]) {\n          this.branchScenarios[scenario] = true;\n        }\n        if (this.leafClasses[chain[i]]) {\n          delete this.leafClasses[chain[i]];\n        }\n      }\n      else {\n        if (this.branchScenarios[scenario]) {\n          isLeaf = false;\n        }\n      }\n    }\n    if (isLeaf) {\n      this.leafClasses[name] = value;\n    }\n  }\n  generateClasses(branch, chain) {\n    if (typeof branch === 'string') {\n      let description = branch.split(/;/);\n      if (description.length > 1) {\n        branch = description.shift();\n        description = description.join(';').replace(/^[\\s]*/, '');\n      }\n      else {\n        description = '';\n      }\n      if (this.constructor.debug) { console.log('string', branch || chain[chain.length - 1], chain, description); }\n      this.generateClass(branch, chain, description);\n    }\n    else if (typeof branch === 'object' && !Array.isArray(branch)) {\n      if (branch) {\n        for (let prop in branch) {\n          chain.push(prop);\n          this.generateClasses(branch[prop], chain);\n          chain.pop();\n        }\n      }\n      else {\n        if (this.constructor.debug) { console.log('null', branch, chain); }\n        this.generateClass(branch, chain);\n      }\n    }\n    else if (typeof branch === 'object' && Array.isArray(branch)) {\n      branch.forEach((item) => {\n        this.generateClasses(item, chain);\n      });\n    }\n    else {\n      throw new Error(this.constructor.name + '.' + this.scope + ': unknown branch type ' + typeof branch + branch);\n    }\n  }\n  generateClass(name, chain, description) {\n    let self = this;\n    let expression;\n    if (!(chain.length >= (chain[0] ? 1 : 2))) {\n      throw new Error(this.constructor.name + '.' + this.scope + ':generateClass invalid chain.length ' + chain.length);\n    }\n    if (!name) {\n      name = chain[chain.length - 1];\n    }\n    if (!chain[0]) {\n      // class mixin\n      if (self.mixins[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        if (i === 0) {\n          expression = 'base';\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      expression = self.arrowFunctionSupport\n        ? 'return (base) => ' + expression\n        : 'return function (base) { return ' + expression + '; }';\n      self.mixins[name] = (new Function('self', expression))(self);\n      if (self.constructor.debug) { console.log('generateClass mixins.' + name + ' = ' + expression); }\n    }\n    else {\n      // class\n      if (this.classes[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass class ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        if (i === 0) {\n          if (self.classes[c]) {\n            expression = 'self.classes.' + c;\n          }\n          else if ((new Function('return (typeof ' + c + ' === \"function\" && (new ' + c + '()) instanceof ' + self.constructor.name + ')'))()) {\n            expression = c;\n          }\n          else {\n            throw new Error(this.constructor.name + '.' + this.scope + ':generateClass global test class ' + c + ' does not exist');\n          }\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      if (description) {\n        description = description.replace(/\"/g,'\\\\\"').replace(/\\n/g, ' ');\n      }\n      let prefix = !this.classSyntaxSupport && typeof Suite._createClass === 'function' && typeof window !== 'object' ? 'self.constructor.' : '';\n      expression = chain.length === 1 && name === expression\n        ? 'return ' + name\n        : name === chain[chain.length - 1]\n          ? 'return ' + expression\n          : self.classSyntaxSupport\n            ? 'return class ' + name + ' extends ' + expression + (description ? ' { get description() { return \"' + description + '\"; } }' : ' {}')\n            : description\n              // TODO: Simplify ES5 classes without Babel helper functions\n              ? `return function (_base) {\n                  ${prefix}_inherits(${name}, _base);\n                  function ${name}() {\n                    ${prefix}_classCallCheck(this, ${name});\n                    return ${prefix}_possibleConstructorReturn(this, (${name}.__proto__ || Object.getPrototypeOf(${name})).apply(this, arguments));\n                  }\n                  ${prefix}_createClass(${name}, [{ key: 'description', get: function get() { return \"${description}\"; } }]);\n                  return ${name};\n                }(${expression})`\n              : `return function (_base) {\n                  ${prefix}_inherits(${name}, _base);\n                  function ${name}() {\n                    ${prefix}_classCallCheck(this, ${name});\n                    return ${prefix}_possibleConstructorReturn(this, (${name}.__proto__ || Object.getPrototypeOf(${name})).apply(this, arguments));\n                  }\n                  return ${name};\n                }(${expression})`;\n      self.classes[name] = (new Function('self', expression))(self);\n      self.updateLeafClasses(self.classes[name]);\n      if (self.constructor.debug) { console.log('generateClass classes.' + name + ' = ' + expression); }\n    }\n  }\n  static repeat(target, count, subclass) {\n    let scenario = {};\n    if (count < 1) {\n      scenario = subclass;\n    }\n    else {\n      scenario[target] = subclass;\n      count--;\n      while (count-- > 0) {\n        scenario = {\n          [target]: scenario\n        };\n      }\n    }\n    return scenario;\n  }\n  static * _permute(targets, i = 0, result = {}, subclass = (list) => list.join('Then')) {\n    let len = targets.length;\n    let j;\n    function swap() {\n      if (j !== i) {\n        let tmp = targets[i];\n        targets[i] = targets[j];\n        targets[j] = tmp;\n      }\n    }\n    function append() {\n      // TODO: cache cursor\n      let cursor = result;\n      for (let k = 0; k < len; k++) {\n        if (!cursor[targets[k]]) {\n          if (k >= len - 1) {\n            cursor[targets[k]] = subclass(targets);\n          }\n          else {\n            cursor[targets[k]] = {};\n          }\n        }\n        cursor = cursor[targets[k]];\n      }\n    }\n    if (i >= len - 1) {\n      yield targets;\n      append();\n    }\n    else {\n      for (j = i; j < len; j++) {\n        swap();\n        for (let sub of this._permute(targets, i + 1, result)) {\n          yield targets;\n          append();\n        }\n        swap();\n      }\n    }\n  }\n  static permute(targets, subclass) {\n    let result = {};\n    for (let chain of this._permute(targets, 0, result, subclass)) {}\n    return result;\n  }\n  async setup() {\n  }\n  forEvent(element, type, trigger, condition) {\n    return new Promise(resolve => {\n      element.addEventListener(type, function onEvent(event) {\n        if (!condition ||\n            (typeof condition === 'boolean' && condition && Polymer.dom(event).rootTarget === element) ||\n            (typeof condition === 'function' && condition(element, type, event))) {\n          element.removeEventListener(type, onEvent);\n          resolve(event);\n        }\n      });\n      if (trigger) {\n        trigger();\n      }\n    })\n  }\n  * scenario() {\n    // trick to unveil overridden methods\n    let steps = [];\n    let proto = Object.getPrototypeOf(this);\n    while (proto.constructor.name && proto.constructor.name !== 'Object') {\n      steps.unshift({\n        name: proto.hasOwnProperty('description') ? proto.description : this.uncamel(Suite._name(proto.constructor)),\n        iteration: proto.hasOwnProperty('iteration') ? proto.iteration : undefined,\n        operation: proto.hasOwnProperty('operation') ? proto.operation : undefined,\n        checkpoint: proto.hasOwnProperty('checkpoint') ? proto.checkpoint: undefined\n      });\n      proto = Object.getPrototypeOf(proto);\n    }\n    yield * steps;\n  }\n  async teardown() {\n  }\n  async run(classes, target) {\n    // TODO: return a Promise object?\n    let self = this;\n    if (Suite._name(self.constructor) === 'Suite') {\n      // Suite Runner\n      let testSuites = [];\n      if (typeof classes === 'number' || typeof classes === 'string') {\n        // Number 0\n        // Number string '0'\n        // CSV string 'Test1,Test2'\n        testSuites = self.testClasses(classes);\n      }\n      else if (typeof classes === 'object' && Array.isArray(classes)) {\n        // String Array [ 'Test1', 'Test2' ]\n        // Class Array [ Test1, Test2 ]\n        // TODO: handle errors if item is neither a string nor a class\n        testSuites = classes.map((item) => typeof item === 'string' ? self.classes[item] : item);\n      }\n      else if (typeof classes === 'object' && !Array.isArray(classes) && classes) {\n        // Object { Test1: Test1, Test2: Test2 } - property names are discarded\n        for (let c in classes) {\n          testSuites.push(classes[c]);\n        }\n      }\n      suite(self.description || (self.scope + ' suite'), function() {\n        // Note: Not waiting for async forEach so that each subsuite runs under the parent suite\n        Promise.all(testSuites.map(async (s) => (new s(target)).run()))\n          .then(() => {\n            if (self.constructor.debug) { console.log(self.description + ' done for ', classes); }\n          });\n      });\n    }\n    else {\n      // Scenario Runner\n      suite(Object.getOwnPropertyDescriptor(Object.getPrototypeOf(self), 'description') ? self.description : self.uncamel(Suite._name(self.constructor)), async function () {\n        suiteSetup(async function () {\n          await self.setup();\n        });\n\n        for (let step of self.scenario()) {\n          if (step.operation || step.checkpoint) {\n            if (step.iteration) {\n              // suite() has to be commented out since subsuites are executed after all the other sibling tests\n              //suite(step.name + ' iterations', async function () {\n                for (let parameters of step.iteration.apply(self)) {\n                  test(parameters.name ?\n                        (typeof parameters.name === 'function' ? parameters.name(parameters) : parameters.name)\n                        : step.name, async function() {\n                    if (self.constructor.skipAfterFailure && self.__failed) {\n                      this.skip();\n                      return;\n                    }\n                    self.__failed = true;\n                    if (step.operation) {\n                      await step.operation.call(self, parameters);\n                    }\n                    if (step.checkpoint) {\n                      await step.checkpoint.call(self, parameters);\n                    }\n                    self.__failed = false;\n                  });\n                }\n              //});\n            }\n            else {\n              test(step.name, async function() {\n                if (self.constructor.skipAfterFailure && self.__failed) {\n                  this.skip();\n                  return;\n                }\n                self.__failed = true;\n                if (step.operation) {\n                  await step.operation.call(self);\n                }\n                if (step.checkpoint) {\n                  await step.checkpoint.call(self);\n                }\n                self.__failed = false;\n              });\n            }\n          }\n        }\n\n        suiteTeardown(async function () {\n          await self.teardown();\n        });\n      });\n    }\n  }\n}\n\n  return Suite;\n})); // UMD Definition\n"]}