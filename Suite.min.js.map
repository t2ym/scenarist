{"version":3,"sources":["Suite.js"],"names":["root","factory","define","amd","Suite","exports","_typeof","module","Function","e","_createClass","require","default","_classCallCheck","_possibleConstructorReturn","_inherits","this","target","description","arguments","length","undefined","_name","constructor","scope","classes","leafClasses","branchScenarios","mixins","scopes","classSyntaxSupport","arrowFunctionSupport","key","get","value","name","replace","toLowerCase","tests","self","generateClass","branch","match","test","split","Array","isArray","Error","prop","generateClasses","proto","console","isLeaf","scenario","forEach","Object","item","i","chain","expression","shift","join","debug","log","c","_this","push","pop","_this2","__BASE_CLASS__","prefix","window","subclass","element","type","Promise","addEventListener","condition","_BASE_CLASS__","__SUBCLASS__","__proto__","getPrototypeOf","apply","Polymer","removeEventListener","onEvent","resolve","trigger","base","updateLeafClasses","regeneratorRuntime","async","_context","prev","next","stop","testSuites","event","dom","rootTarget","mark","steps","wrap","_context2","unshift","hasOwnProperty","uncamel","iteration","operation","checkpoint","delegateYield","_context3","_context10","suite","testClasses","suiteSetup","map","setup","describe","_this5","all","s","_context4","abrupt","step","run","then","getOwnPropertyDescriptor","_loop","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context9","_loop2","it","parameters","_context7","skipAfterFailure","__failed","skip","awrap","call","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","err","_iterator2","return","_context8","Symbol","iterator","done","t0","finish","suiteTeardown","after","_context6","teardown","set","toString","list","reconnectableList","reconnectable","last","l","func","count","_permute","targets","len","j","swap","append","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","sub","result","_context11","cursor","k","tmp","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4"],"mappings":"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","file":"Suite.min.js","sourcesContent":["/*\n@license https://github.com/t2ym/scenarist/blob/master/LICENSE.md\nCopyright (c) 2016, Tetsuya Mori <t2y3141592@gmail.com>. All rights reserved.\n*/\n\n(function (root, factory) {\n\n  'use strict';\n\n  /* istanbul ignore if: AMD is not tested */\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.Suite = root.Suite || factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n    try {\n      new Function('return class $$A$$ {}');\n    }\n    catch (e) {\n      // Supply Babel runtime helpers\n      module.exports._createClass = module.exports._createClass || require('babel-runtime/helpers/_create-class.js').default;\n      module.exports._classCallCheck = module.exports._classCallCheck || require('babel-runtime/helpers/_class-call-check.js').default;\n      module.exports._possibleConstructorReturn = module.exports._possibleConstructorReturn || require('babel-runtime/helpers/_possible-constructor-return.js').default;\n      module.exports._inherits = module.exports._inherits || require('babel-runtime/helpers/_inherits.js').default;\n    }\n  } else {\n    // Browser globals\n    root.Suite = root.Suite || factory();\n  }\n\n}(this, function () {\n// UMD Definition above, do not remove this line\n  'use strict';\n\nclass Suite {\n  static get reconnectable() { return true; }\n  static get skipAfterFailure() { return false; }\n  constructor(target, description = target + ' suite') {\n    if (Suite._name(this.constructor) === 'Suite') {\n      // suite instance\n      this.scope = target || '';\n      this.description = description;\n      this.classes = {};\n      this.leafClasses = {};\n      this.branchScenarios = {};\n      this.mixins = {};\n      this.constructor.scopes = this.constructor.scopes || {};\n      this.constructor.scopes[this.scope] = this;\n      this.classSyntaxSupport = true;\n      this.arrowFunctionSupport = true;\n      try {\n        new Function('return class A {}');\n      }\n      catch (e) {\n        this.classSyntaxSupport = false;\n      }\n      try {\n        new Function('return () => 1');\n      }\n      catch (e) {\n        this.arrowFunctionSupport = false;\n      }\n    }\n    else {\n      // test instance\n      this.target = target;\n    }\n  }\n  uncamel(name) {\n    return name.replace(/([A-Z])/g, ' $1').replace(/_/g, ' ').replace(/[ ]{1,}/g, ' ').replace(/^ /, '').toLowerCase();\n  }\n  static _name(func) {\n    return func.hasOwnProperty('name')\n      ? func.name\n      : func.toString().replace(/^[\\S\\s]*?function\\s*/, \"\").replace(/[\\s\\(\\/][\\S\\s]+$/, \"\");\n  }\n  set test(value) {\n    if (typeof value === 'function') {\n      let name = Suite._name(value);\n      if (name) {\n        // test class\n        if (this.classes[name]) {\n          // test class with the name already exists\n          throw new Error(this.constructor.name + '.' + this.scope + ': class ' + value.name + ' already exists');\n        }\n        else {\n          // register a new test class with the name\n          this.classes[name] = value;\n          this.updateLeafClasses(value);\n        }\n      }\n      else {\n        // test class mixin\n        name = Suite._name(value(null));\n        if (name) {\n          if (this.mixins[name]) {\n            // test class mixin with the name already exists\n            throw new Error(this.constructor.name + '.' + this.scope + ': class mixin ' + name + ' already exists');\n          }\n          else {\n            // register a new test class mixin with the name\n            this.mixins[name] = value;\n          }\n        }\n        else {\n          // no name for the test class mixin\n          throw new Error(this.constructor.name + '.' + this.scope + ': class mixin has no name ' + value.toString());\n        }\n      }\n    }\n    else if (typeof value === 'object') {\n      if (value) {\n        // branch object\n        this.generateClasses(value, []);\n      }\n      else {\n        throw new Error(this.constructor.name + '.' + this.scope + ': null object is not expected');\n      }\n    }\n  }\n  get test() {\n    let list = [];\n    for (let c in this.leafClasses) {\n      list.push(this.leafClasses[c]);\n    }\n    let reconnectableList = [];\n    for (let i in list) {\n      if (list[i].reconnectable) {\n        if (reconnectableList.length === 0) {\n          reconnectableList.push([list[i]]);\n        }\n        else {\n          let last = reconnectableList[reconnectableList.length - 1];\n          if (last.length === 0) {\n            last.push(list[i]);\n          }\n          else {\n            if (last[last.length - 1].reconnectable) {\n              last.push(list[i]);\n            }\n            else {\n              reconnectableList.push([list[i]]);\n            }\n          }\n        }\n      }\n      else {\n        reconnectableList.push([list[i]]);\n      }\n    }\n    // [ 'UnreconnectableTest', 'ReconnectableTest,ReconnectableTest,...', 'UnreconnectableTest', ...]\n    return reconnectableList.map(l => l.map(c => Suite._name(c)).join(','));\n  }\n  testClasses(tests) {\n    let self = this;\n    return (typeof tests === 'number' || tests.match(/^[0-9]$/) ? self.test[tests] : tests).split(/,/).map((name) => {\n      if (!self.classes[name]) {\n        throw new Error('Suite.' + self.scope + ': Test ' + name + ' is not defined');\n      }\n      return self.classes[name];\n    });\n  }\n  updateLeafClasses(value) {\n    let proto = value;\n    let chain = [];\n    let name = Suite._name(proto);\n    let isLeaf = true;\n    let scenario = '';\n    while (Suite._name(proto) && Suite._name(proto) !== 'Suite') {\n      chain.unshift(Suite._name(proto));\n      proto = Object.getPrototypeOf(proto);\n    }\n    for (let i in chain) {\n      scenario = scenario ? scenario + ',' + chain[i] : chain[i];\n      if (i < chain.length - 1) {\n        if (!this.branchScenarios[scenario]) {\n          this.branchScenarios[scenario] = true;\n        }\n        if (this.leafClasses[chain[i]]) {\n          delete this.leafClasses[chain[i]];\n        }\n      }\n      else {\n        if (this.branchScenarios[scenario]) {\n          isLeaf = false;\n        }\n      }\n    }\n    if (isLeaf) {\n      this.leafClasses[name] = value;\n    }\n  }\n  generateClasses(branch, chain) {\n    if (typeof branch === 'string') {\n      let description = branch.split(/;/);\n      if (description.length > 1) {\n        branch = description.shift();\n        description = description.join(';').replace(/^[\\s]*/, '');\n      }\n      else {\n        description = '';\n      }\n      if (this.constructor.debug) { console.log('string', branch || chain[chain.length - 1], chain, description); }\n      this.generateClass(branch, chain, description);\n    }\n    else if (typeof branch === 'object' && !Array.isArray(branch)) {\n      if (branch) {\n        for (let prop in branch) {\n          chain.push(prop);\n          this.generateClasses(branch[prop], chain);\n          chain.pop();\n        }\n      }\n      else {\n        if (this.constructor.debug) { console.log('null', branch, chain); }\n        this.generateClass(branch, chain);\n      }\n    }\n    else if (typeof branch === 'object' && Array.isArray(branch)) {\n      branch.forEach((item) => {\n        this.generateClasses(item, chain);\n      });\n    }\n    else {\n      throw new Error(this.constructor.name + '.' + this.scope + ': unknown branch type ' + typeof branch + branch);\n    }\n  }\n  generateClass(name, chain, description) {\n    let self = this;\n    let expression;\n    if (!(chain.length >= (chain[0] ? 1 : 2))) {\n      throw new Error(this.constructor.name + '.' + this.scope + ':generateClass invalid chain.length ' + chain.length);\n    }\n    if (!name) {\n      name = chain[chain.length - 1];\n    }\n    if (!chain[0]) {\n      // class mixin\n      if (self.mixins[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        if (i === 0) {\n          expression = 'base';\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      expression = self.arrowFunctionSupport\n        ? 'return (base) => ' + expression\n        : 'return function (base) { return ' + expression + '; }';\n      self.mixins[name] = (new Function('self', expression))(self);\n      if (self.constructor.debug) { console.log('generateClass mixins.' + name + ' = ' + expression); }\n    }\n    else {\n      // class\n      if (this.classes[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass class ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        if (i === 0) {\n          if (self.classes[c]) {\n            expression = 'self.classes.' + c;\n          }\n          else if ((new Function('return (typeof ' + c + ' === \"function\" && (new ' + c + '()) instanceof ' + self.constructor.name + ')'))()) {\n            expression = c;\n          }\n          else {\n            throw new Error(this.constructor.name + '.' + this.scope + ':generateClass global test class ' + c + ' does not exist');\n          }\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      if (description) {\n        description = description.replace(/\"/g,'\\\\\"').replace(/\\n/g, ' ');\n      }\n      let prefix = !this.classSyntaxSupport && typeof Suite._createClass === 'function' && typeof window !== 'object' ? 'self.constructor.' : '';\n      expression = chain.length === 1 && name === expression\n        ? 'return ' + name\n        : name === chain[chain.length - 1]\n          ? 'return ' + expression\n          : self.classSyntaxSupport\n            ? 'return class ' + name + ' extends ' + expression + (description ? ' { get description() { return \"' + description + '\"; } }' : ' {}')\n            : (function (subclass, base, description) { // generate ES5 class by manipulating transpiled func.toString()\n                return 'return (' +\n                  (description\n                    ? function (__BASE_CLASS__) { return class __SUBCLASS__ extends __BASE_CLASS__ { get description() { return 314159265358; } } }\n                    : function (__BASE_CLASS__) { return class __SUBCLASS__ extends __BASE_CLASS__ {} }\n                  ).toString()\n                    .replace(/__cov_[^. ]*[.][a-z]\\[\\'[0-9]*\\'\\](\\[[0-9]*\\])?\\+\\+[;,]?/g, '') // trim istanbul coverage counters\n                    .replace(/__SUBCLASS__/g, subclass)\n                    .replace(/_inherits|_classCallCheck|_createClass|_possibleConstructorReturn/g, prefix + '$&')\n                    .replace(/ 314159265358;/g, ' \"' + description + '\";')\n                  + ')(' + base + ');'\n              })(name, expression, description);\n      self.classes[name] = (new Function('self', expression))(self);\n      self.updateLeafClasses(self.classes[name]);\n      if (self.constructor.debug) { console.log('generateClass classes.' + name + ' = ' + expression); }\n    }\n  }\n  static repeat(target, count, subclass) {\n    let scenario = {};\n    if (count < 1) {\n      scenario = subclass;\n    }\n    else {\n      scenario[target] = subclass;\n      count--;\n      while (count-- > 0) {\n        scenario = {\n          [target]: scenario\n        };\n      }\n    }\n    return scenario;\n  }\n  static * _permute(targets, i = 0, result = {}, subclass = (list) => list.join('Then')) {\n    let len = targets.length;\n    let j;\n    function swap() {\n      if (j !== i) {\n        let tmp = targets[i];\n        targets[i] = targets[j];\n        targets[j] = tmp;\n      }\n    }\n    function append() {\n      // TODO: cache cursor\n      let cursor = result;\n      for (let k = 0; k < len; k++) {\n        if (!cursor[targets[k]]) {\n          if (k >= len - 1) {\n            cursor[targets[k]] = subclass(targets);\n          }\n          else {\n            cursor[targets[k]] = {};\n          }\n        }\n        cursor = cursor[targets[k]];\n      }\n    }\n    if (i >= len - 1) {\n      yield targets;\n      append();\n    }\n    else {\n      for (j = i; j < len; j++) {\n        swap();\n        for (let sub of this._permute(targets, i + 1, result)) {\n          yield targets;\n          append();\n        }\n        swap();\n      }\n    }\n  }\n  static permute(targets, subclass) {\n    let result = {};\n    for (let chain of this._permute(targets, 0, result, subclass)) {}\n    return result;\n  }\n  async setup() {\n  }\n  forEvent(element, type, trigger, condition) {\n    return new Promise(resolve => {\n      element.addEventListener(type, function onEvent(event) {\n        if (!condition ||\n            (typeof condition === 'boolean' && condition && Polymer.dom(event).rootTarget === element) ||\n            (typeof condition === 'function' && condition(element, type, event))) {\n          element.removeEventListener(type, onEvent);\n          resolve(event);\n        }\n      });\n      if (trigger) {\n        trigger();\n      }\n    })\n  }\n  * scenario() {\n    // trick to unveil overridden methods\n    let steps = [];\n    let proto = Object.getPrototypeOf(this);\n    while (proto.constructor.name && proto.constructor.name !== 'Object') {\n      steps.unshift({\n        name: proto.hasOwnProperty('description') ? proto.description : this.uncamel(Suite._name(proto.constructor)),\n        iteration: proto.hasOwnProperty('iteration') ? proto.iteration : undefined,\n        operation: proto.hasOwnProperty('operation') ? proto.operation : undefined,\n        checkpoint: proto.hasOwnProperty('checkpoint') ? proto.checkpoint: undefined\n      });\n      proto = Object.getPrototypeOf(proto);\n    }\n    yield * steps;\n  }\n  async teardown() {\n  }\n  async run(classes, target) {\n    // TODO: return a Promise object?\n    let self = this;\n    if (Suite._name(self.constructor) === 'Suite') {\n      // Suite Runner\n      let testSuites = [];\n      if (typeof classes === 'number' || typeof classes === 'string') {\n        // Number 0\n        // Number string '0'\n        // CSV string 'Test1,Test2'\n        testSuites = self.testClasses(classes);\n      }\n      else if (typeof classes === 'object' && Array.isArray(classes)) {\n        // String Array [ 'Test1', 'Test2' ]\n        // Class Array [ Test1, Test2 ]\n        // TODO: handle errors if item is neither a string nor a class\n        testSuites = classes.map((item) => typeof item === 'string' ? self.classes[item] : item);\n      }\n      else if (typeof classes === 'object' && !Array.isArray(classes) && classes) {\n        // Object { Test1: Test1, Test2: Test2 } - property names are discarded\n        for (let c in classes) {\n          testSuites.push(classes[c]);\n        }\n      }\n      (typeof suite === 'function' ? suite : describe)(self.description || (self.scope + ' suite'), function() {\n        // Note: Not waiting for async forEach so that each subsuite runs under the parent suite\n        Promise.all(testSuites.map(async (s) => (new s(target)).run()))\n          .then(() => {\n            if (self.constructor.debug) { console.log(self.description + ' done for ', classes); }\n          });\n      });\n    }\n    else {\n      // Scenario Runner\n      (typeof suite === 'function' ? suite : describe)(Object.getOwnPropertyDescriptor(Object.getPrototypeOf(self), 'description') ? self.description : self.uncamel(Suite._name(self.constructor)), async function () {\n        (typeof suiteSetup === 'function' ? suiteSetup : before)(async function () {\n          await self.setup();\n        });\n\n        for (let step of self.scenario()) {\n          if (step.operation || step.checkpoint) {\n            if (step.iteration) {\n              // suite() has to be commented out since subsuites are executed after all the other sibling tests\n              //suite(step.name + ' iterations', async function () {\n                for (let parameters of step.iteration.apply(self)) {\n                  (typeof test === 'function' ? test : it)(parameters.name ?\n                        (typeof parameters.name === 'function' ? parameters.name(parameters) : parameters.name)\n                        : step.name, async function() {\n                    if (self.constructor.skipAfterFailure && self.__failed) {\n                      this.skip();\n                      return;\n                    }\n                    self.__failed = true;\n                    if (step.operation) {\n                      await step.operation.call(self, parameters);\n                    }\n                    if (step.checkpoint) {\n                      await step.checkpoint.call(self, parameters);\n                    }\n                    self.__failed = false;\n                  });\n                }\n              //});\n            }\n            else {\n              (typeof test === 'function' ? test : it)(step.name, async function() {\n                if (self.constructor.skipAfterFailure && self.__failed) {\n                  this.skip();\n                  return;\n                }\n                self.__failed = true;\n                if (step.operation) {\n                  await step.operation.call(self);\n                }\n                if (step.checkpoint) {\n                  await step.checkpoint.call(self);\n                }\n                self.__failed = false;\n              });\n            }\n          }\n        }\n\n        (typeof suiteTeardown === 'function' ? suiteTeardown : after)(async function () {\n          await self.teardown();\n        });\n      });\n    }\n  }\n}\n\n  return Suite;\n})); // UMD Definition\n"]}