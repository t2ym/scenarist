{"version":3,"sources":["Suite.js"],"names":["root","factory","define","amd","Suite","exports","_typeof","module","this","target","description","arguments","length","undefined","_classCallCheck","constructor","name","scope","classes","leafClasses","branchScenarios","mixins","scopes","_createClass","key","get","value","replace","toLowerCase","tests","match","self","test","split","map","console","branch","chain","generateClass","pop","isLeaf","scenario","proto","Object","getPrototypeOf","i","forEach","generateClasses","item","Error","log","expression","Array","isArray","_this","prop","Function","debug","_this2","element","addEventListener","condition","event","rootTarget","resolve","c","steps","unshift","iteration","hasOwnProperty","operation","checkpoint","regeneratorRuntime","async","_context","prev","next","stop","type","trigger","Promise","onEvent","Polymer","dom","removeEventListener","mark","wrap","_context2","suite","getOwnPropertyDescriptor","uncamel","delegateYield","_context3","_context10","testSuites","testClasses","step","skipAfterFailure","push","_this3","all","s","_context4","abrupt","run","_loop","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context9","suiteSetup","_context5","awrap","setup","_loop2","parameters","__failed","skip","call","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","apply","Symbol","iterator","done","err","return","_context8","t0","finish","suiteTeardown","_context6","teardown","set","updateLeafClasses","toString","list","reconnectable","reconnectableList","last","shift","l","join","count","subclass","_permute","targets","len","j","swap","append","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","sub","result","_context11","cursor","k","tmp","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4"],"mappings":"mgCAKC,SAAUA,KAAMC,SAEf,YAGsB,mBAAXC,SAAyBA,OAAOC,IAEzCD,UAAW,WAPd,MAAUF,MAAMC,MAASD,KAAAI,OAAAH,YAExB,YAAA,mBAAAI,SAAA,YAAAC,QAAAD,UAGAE,OAAIF,QAAAJ,UAGAD,KAAAI,MAAQJ,KAAKI,OAAaA,WAG5BI,KAAA,WAEA,YAFA,IADKJ,OACL,WAOD,QAAAA,OAAAK,QAAA,GAAAC,aAAAC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAAF,OAAA,QAAAK,iBAAAN,KAAAJ,OAEiB,UApBnBI,KAoBOO,YAAYC,MAElBR,KAAAS,MAAAR,QAAA,GASID,KAAKE,YAAcA,YAPnBN,KAJcc,WAAAV,KAAAW,eAAAX,KAAAY,mBAAAZ,KAAAa,UAKWb,KAAAO,YAAAO,OAAAd,KAAAO,YAAAO,WAAcd,KAAAO,YAAAO,OAAAd,KAAAS,OAAAT,MACXA,KAAAC,OAAAA,OAf9B,MAAAc,cAAAnB,MAAA,OAAAoB,IAAA,gBAAAC,IAAA,WAKA,OAAA,KALAD,IAAA,mBAAAC,IAAA,WAM2BxB,OAA3B,MANAsB,aAAAnB,QAAAoB,IAAA,UAAAE,MAAA,SAiCMV,MAjBR,MAAAA,MAoBKW,QAAQ,qBAAsB,SAE9BA,QAAQ,8BAA+B,WApBxCC,iBAlBFJ,IAAA,cAAAE,MAAA,SAgKEG,OAKEnB,GAAAA,MAAAA,IACD,QAAA,gBAAAmB,QAAAA,MAAAC,MAAA,WAAAC,KAAAC,KAAAH,OAAAA,OAAAI,MAAA,KAAAC,IAAA,SAAAlB,MACD,IAAAe,KAAIb,QAAKH,MAAqBoB,KAAAA,IAAAA,OAAY,SAAUC,KAAAA,MAAUC,UAAYzB,KAA5C,kBAC9B,OAAAmB,MAAKO,QAAAA,WAxKPd,IAAA,oBAAAE,MAAA,SA4KSA,OAOL,IANEW,GAAAA,OAAAA,MACAA,SACAA,KAAAA,MAAME,KACPC,QAAA,EACFC,SACI,GACHC,MAAI1B,MAAwB,UAAnBD,MAAAA,MAAqBoB,MAAAA,QAAAA,MAAYnB,MAAyB0B,MAAAC,OAAAC,eAAAF,MAEpE,KAAA,GAAAG,KAAAR,OACFI,SACIA,SAAWL,SAAP,IAAAC,MAAAQ,GAAAR,MAAAQ,GACPT,EAAAA,MAAOU,OAAQ,GACbtC,KAAKuC,gBAAgBC,YACtBxC,KAFDY,gBAAAqB,WAAA,GAKAjC,KAAMW,YAAUkB,MAAKtB,WACtBP,MAAAW,YAAAkB,MAAAQ,KArLerC,KAAAY,gBAAAqB,YAuLsBD,QAAA,EAGtCA,UACEhC,KAAAW,YAAU8B,MAAWlC,UApMvBS,IAAA,kBAAAE,MAAA,SAuMSW,OAAMA,OAAMzB,GAAAA,OAAAA,IACpB,IAAA,gBAAAwB,QAAA,CACD,GAAA1B,aAAe0B,OAAAH,MAAA,IACbvB,aAAAE,OAAA,GACAwB,OAAIL,YAAYf,QACdN,YAAUuC,YAAWlC,KAAAA,KAALY,QAAwB,SAAM,KAG9CjB,YAAU,GAETF,KAFDO,YAGSgB,OAAAI,QAAgBe,IAAA,SAAAd,QAAAC,MAAAA,MAAAzB,OAAA,GAAAyB,MAAA3B,aACvByC,KAAAA,cAAAA,OAAad,MAAA3B,iBAGb,IAAgB,YAAhB,mBAAM0B,QAAN,YAAA9B,QAAM8B,UAAerB,MAAYC,QAAOoB,QAY5CC,CAAAA,GAAc,YAAdA,mBAAMS,QAANT,YAAAA,QAAMS,WAAkBM,MAAAC,QAAAjB,QAOnB,KAAA,IAFIa,OAGAzC,KAAAO,YAAAC,KAAA,IAAAR,KAAAS,MAAA,0BAAA,mBAAAmB,QAAA,YAAA9B,QAAA8B,SAAAA,OAPPA,QAAAU,QAAID,SAAMG,MACRM,MAAAP,gBAAS7B,KAAYmB,aAbtB,IAAAD,OACF,IAVD,GAAAmB,QAAAnB,QAWAe,MAAAA,KAAAA,MACApB,KAAKV,gBAAgBe,OAAIoB,MAASnB,OAClCA,MAAIN,UAGJvB,MAAAO,YAAA0C,OAAAtB,QAAAe,IAAA,OAAAd,OAAAC,OACA7B,KAAA8B,cAAiBtB,OAAOqB,UA/N1Bb,IAAA,gBAAAE,MAAA,SAmOIV,KAWKqB,MAAShB,aAAW,GAAAqC,QAAAlD,KACvB2C,KAAAA,KACDA,WAAAA,MAEC,MAAAd,MAAAzB,SAAUqC,MAAM,GAAKlC,EAAAA,IACtB,KAAA,IAAAkC,OAAAzC,KAAAO,YAAAC,KAAA,IAAAR,KAAAS,MAAA,uCAAAoB,MAAAzB,OASH,IAPAuC,OAKApB,KAAAA,MAAKb,MAAQF,OAAS,IAEtBqB,MAAIN,GAnPU,CAuTd4B,GAAAA,KAAAA,QAAQC,MACN,KAAA,IAAKC,OAAAA,KAAD9C,YACQ8C,KAAP,IAAqBrD,KAAAS,MAAa4C,wBAAyBC,KAAOC,kBAGrEC,OAAAA,QAAAA,SAAAA,EAAQF,GACT,GAAA,IAAAjB,EACF,GAPDd,KAAAb,QAAA+C,GAQAd,WAAa,gBAAAc,MAEZ,CAAA,IAAA,GAAAT,UAAA,kBAAAS,EAAA,2BAAAA,EAAA,kBAAAlC,KAAAhB,YAAAC,KAAA,OAjUa,KAAA,IAAAiC,OAAAS,OAAA3C,YAAAC,KAAA,IAAA0C,OAAAzC,MAAA,oCAAAgD,EAAA,kBAsThBd,YAAAc,MAtTgB,CAAA,IAAAlC,KAAAV,OAAA4C,GAqUhB,KAAA,IAAAhB,OAAAS,OAAA3C,YAAAC,KAAA,IAAA0C,OAAAzC,MAAA,wBAAAgD,EAAA,kBArUgBd,YAAA,eAAAc,EAAA,IAAAd,WAAA,OA4OdA,WAA8B,IAAjBd,MAAMzB,QAAgBI,OAASmC,WA4F9C,UAAAnC,KACEkD,OAAAA,MAAMC,MAANvD,OAAc,GACZI,UAAAA,WACAoD,gBAAAA,KAAiBC,YAANlB,YAAAzC,YAA0C0D,kCAFzC1D,YAAAiB,QAAA,KAAA,OAAA,SAAA,OAGZ2C,KAAAA,QAAAA,MAAAA,GAAW5B,UAAM2B,OAAAA,YAAetC,MAChCwC,KAAAA,kBAAAA,KAAY7B,QAAM2B,OAJNtC,KAAAhB,YAAd0C,OAAAtB,QAAAe,IAAA,yBAAAlC,KAAA,MAAAmC,gBAtFSpC,CAAyF,GAAAgB,KAAAV,OAAAL,MACnG,KAAA,IAAAiC,OAAAzC,KAAAO,YAAAC,KAAA,IAAAR,KAAAS,MAAA,wBAAAD,KAAA,kBApPeqB,OAAAS,QAAA,SAAAmB,EAAApB,GAAA,GAAA,IAAAA,EAAAM,WAAA,WAAA,CAAA,IAAApB,KAAAV,OAAA4C,GAAA,KAAA,IAAAhB,OAAAS,OAAA3C,YAAAC,KAAA,IAAA0C,OAAAzC,MAAA,wBAAAgD,EAAA,kBAAAd,YAAA,eAAAc,EAAA,IAAAd,WAAA,OAAAA,WAAA,oBAAAA,WAAApB,KAAAV,OAAAL,MAAA,GAAAwC,UAAA,OAAAL,YAAApB,MAAAA,KAAAhB,YAAA0C,OAAAtB,QAAAe,IAAA,wBAAAlC,KAAA,MAAAmC,gBAThB3B,IAAA,QAAAE,MAAA,WAAA,MAAA8C,oBAAAC,MAAA,SAAAC,UAAA,OAAA,OAAAA,SAAAC,KAAAD,SAAAE,MAAA,IAAA,GAAA,IAAA,MAAA,MAAAF,UAAAG,SAAA,KAAArE,SAAAgB,IAAA,WAAAE,MAAA,SAwX+BiC,QAAAmB,KAAAC,QAAAlB,WAAA,MAAA,IAAAmB,SAAA,SAAAhB,SAxD7BL,QAAQC,iBAAiBkB,KAAM,QAASG,SAAQnB,SAwDnBD,WAAA,iBAAAA,YAAAA,WAAAqB,QAAAC,IAAArB,OAAAC,aAAAJ,SAAA,kBAAAE,YAAAA,UAAAF,QAAAmB,KAAAhB,UAAAH,QAAAyB,oBAAAN,KAAAG,SAAAjB,QAAAF,UAEvBiB,SAA8B5C,eA1XtCX,IAAA,WAAAE,MAAA8C,mBAAAa,KAAA,QAAA5C,YAAA,GAAAyB,OAAAxB,KAAA,OAAA8B,oBAAAc,KAAA,SAAAC,WAAA,OAAA,OAAAA,UAAAZ,KAAAY,UAAAX,MAAA,IAAA,GAgY8I,IAD5IV,SACAsB,MAAAA,OAAAA,eAAaC,MAA+H/C,MAAA3B,YAAAC,MAAA,WAAA0B,MAAA3B,YAAAC,MA9C5IkD,MAAMC,SA8CsInD,KAAA0B,MAAA2B,eAAA,eAAA3B,MAAAhC,YAAAF,KAAAkF,QAAAhD,MAAA3B,YAAAC,MAAAoD,UAAA1B,MAAA2B,eAAA,aAAA3B,MAAA0B,UAAAvD,OAAAyD,UAAA5B,MAAA2B,eAAA,aAAA3B,MAAA4B,UAAAzD,OAAA0D,WAAA7B,MAAA2B,eAAA,cAAA3B,MAAA6B,WAAA1D,SAC/H6B,MAAAC,OAAAC,eAAAF,MAjYf,OAAA6C,WAAAI,cAiYezB,MAjYf,KAAA,EAAA,KAAA,GAAA,IAAA,MAAA,MAAAqB,WAAAV,SAAApC,SAAAjC,UAAAgB,IAAA,WAAAE,MAAA,WAAA,MAAA8C,oBAAAC,MAAA,SAAAmB,WAAA,OAAA,OAAAA,UAAAjB,KAAAiB,UAAAhB,MAAA,IAAA,GAAA,IAAA,MAAA,MAAAgB,WAAAf,SAAA,KAAArE,SAAAgB,IAAA,MAAAE,MAAA,SA8VQR,QAAST,QA9VjB,GAAAsB,KAAA,OAAAyC,oBAAAC,MAAA,SAAAoB,YAAA,OAAA,OAAAA,WAAAlB,KAAAkB,WAAAjB,MAAA,IAAA,GAiYe7C,KAAAvB,KAAA,UAAAuB,KAAAhB,YAAAC,MAAA,WAAA,GAAA8E,cAAA,IAAA,gBAAA5E,UAAA,gBAAAA,SAKT4E,WAAA/D,KAAAgE,YAAIC,aACkB,IAAA,YAAA,mBAAA9E,SAAA,YAAAZ,QAAAY,WAAAkC,MAAAC,QAAAnC,SAMK4E,WAAA5E,QAAAgB,IAAA,SAAAc,MAAA,MAAA,gBAAAA,MAAAjB,KAAAb,QAAA8B,MAAAA,WAAA,IAAA,YAAA,mBAAA9B,SAAA,YAAAZ,QAAAY,YAAAkC,MACbrB,QAAKhB,UAAYkF,QADJ,IAAA,GAAAhC,KAAA/C,SAAA4E,WAAAI,KAAAhF,QAAA+C,GAAAuB,OAAAzD,KAAArB,aAAAqB,KAAAd,MAAA,SAAA,WAAA,GAAAkF,QAAA3F,IAAAwE,SAAAoB,IAAAN,WAAA5D,IAAA,SAAAmE,GAAA,MAAA7B,oBAAAC,MAAA,SAAA6B,WAAA,OAAA,OAAAA,UAAA3B,KAAA2B,UAAA1B,MAAA,IAAA,GAAA,MAAA0B,WAAAC,OAAA,SAAA,GAAAF,GAAA5F,QAAA+F,MAAA,KAAA,GAAA,IAAA,MAAA,MAAAF,WAAAzB,SAAA,KAAAsB,WAKjBpE,KAAAA,WAxBJA,KAAKhB,YAAY0C,OAAStB,QAAQe,IAAInB,KAAKrB,YAAc,aAAcQ,gBAmBlDsE,MAAA7C,OAAA8C,yBAAA9C,OAAAC,eAAAb,MAAA,eAAAA,KAAArB,YAAAqB,KAAA2D,QAAA3D,KAAAhB,YAAAC,MAAA,WAAA,GAAAyF,OAAAC,0BAAAC,kBAAAC,eAAAC,UAAAC,MAAAd,IAAA,OAAAxB,oBAAAC,MAAA,SAAAsC,WAAA,OAAA,OAAAA,UAAApC,KAAAoC,UAAAnC,MAAA,IAAA,GAAA,IAAAoC,WAAA,WAAA,MAAAxC,oBAAAC,MAAA,SAAAwC,WAAA,OAAA,OAAAA,UAAAtC,KAAAsC,UAAArC,MAAA,IAAA,GAAA,MAAAqC,WAAArC,KAAA,EAAAJ,mBAAA0C,MAXrBnF,KAAKoF,QAWgB,KAAA,GAAA,IAAA,MAAA,MAAAF,WAAApC,SAAA,KAAArE,QAAAiG,MAAA,SAAAT,MAAA,GAAAA,KAAA1B,WAAA0B,KAAAzB,WAAA,GAAAyB,KAAA5B,UAAA,CAAA,GAAAgD,QAAA,SAAAC,YAFnBrF,KAAKqF,WAAWrG,KAEG,kBAAAqG,YAAArG,KAAAqG,WAAArG,KAAAqG,YAAAA,WAAArG,KAYjBe,KAAAA,KAAAA,WAAAA,MAAAA,oBAAAA,MAAAA,SAAAA,WAAAA,OAAAA,OAAAA,UAAAA,KAAAA,UAAAA,MAAAA,IAAAA,GAAAA,IAXIA,KAAKhB,YAAYkF,mBAAoBlE,KAAKuF,SAW9CvF,CAAAA,UAAAA,KAAAA,CAAAA,OAAAA,MAZiBvB,MAAA+G,OAYjBxF,UAAAA,OAAAA,SAAAA,KAAAA,GAAAA,GAZiBA,KAAAuF,UAAA,GAAAtB,KAAA1B,UAYjBvC,CAAAA,UAAAA,KAAAA,CAAAA,OAAAA,MAAAA,WAAAA,KAAAA,EAAAA,mBAAAA,MAZiBiE,KAAA1B,UAAAkD,KAAAzF,KAAAsF,YAYjBtF,KAAAA,GAAAA,IAlBYiE,KAAAzB,WAkBZxC,CAAAA,UAAAA,KAAAA,EAAAA,OAAAA,MAAAA,WAAAA,KAAAA,GAAAA,mBAAAA,MAFQiE,KAAKzB,WAAWiD,KAAKzF,KAAMsF,YAEnCtF,KAAAA,IAhBNA,KAAAuF,UAAA,CAgBMvF,KAAAA,IAAAA,IAAAA,MAAAA,MAAAA,WAAAA,SAAAA,KAAAA,SAZiB0F,4BAAA,EAAAC,oBAAA,EAAAC,gBAAA9G,MAAA,KAAA,IAAA,GAAA+G,QAAAC,WAAA7B,KAAA5B,UAAA0D,MAAA/F,MAAAgG,OAAAC,cAAAP,4BAAAG,OAAAC,WAAAjD,QAAAqD,MAAAR,4BAAA,EAAA,CAAA,GAAAJ,YAAAO,OAAAlG,KAAA0F,QAAAC,aAAA,MAAAa,KAAAR,oBAAA,EAAAC,gBAAAO,IAAA,QAAA,KAAAT,4BAAAI,WAAAM,QAAAN,WAAAM,SAAA,QAAA,GAAAT,mBAAA,KAAAC,uBAHrB3F,MAAAgE,KAAAhF,KAAA,WAAA,MAAAwD,oBAAAC,MAAA,SAAA2D,WAAA,OAAA,OAAAA,UAAAzD,KAAAyD,UAAAxD,MAAA,IAAA,GAAA,IAAmD7C,KAAAhB,YAAAkF,mBAAAlE,KAAAuF,SAAnD,CAAAc,UAAAxD,KAAA,CAAA,OAAA,MAuBEpE,MAAK+G,OAvBPa,UAAA7B,OAAA,SAAA,KAAA,GAAA,GAkBFxE,KAAAuF,UAAA,GArBkBtB,KAAA1B,UAGhB,CAAA8D,UAAAxD,KAAA,CAAA,OAAA,MAAAwD,WAAAxD,KAAA,EAAAJ,mBAAA0C,MAHgBlB,KAAA1B,UAAAkD,KAAAzF,MAGhB,KAAA,GAAA,IAHgBiE,KAAAzB,WAGhB,CAAA6D,UAAAxD,KAAA,EAAA,OAAA,MAAAwD,WAAAxD,KAAA,GAAAJ,mBAAA0C,MAHgBlB,KAAAzB,WAAAiD,KAAAzF,MAGhB,KAAA,IAHgBA,KAAAuF,UAAA,CAGhB,KAAA,IAAA,IAAA,MAAA,MAAAc,WAAAvD,SAAA,KAAArE,SAGqBkG,2BAAA,EAAAC,mBAAA,EAAAC,eAAA/F,OAAAkG,UAAApC,KAAA,EAAAkC,UAAA9E,KAAAU,WAAAsF,OAAAC,cAAAtB,2BAAAI,MAAAD,UAAAjC,QAAAqD,MAAAvB,2BAAA,EAAAV,KAAAc,MAAApF,MAAA+E,MAAAT,KAAAe,WAAAnC,KAAA,EAAA,MAAA,KAAA,GAAAmC,UAAApC,KAAA,EAAAoC,UAAAsB,GAAAtB,UAAA,MAAA,GAAAJ,mBAAA,EAAAC,eAAAG,UAAAsB,EAAA,KAAA,IAAAtB,UAAApC,KAAA,GAAAoC,UAAApC,KAAA,IAAA+B,2BAAAG,UAAAsB,QAAAtB,UAAAsB,QAAA,KAAA,IAAA,GAAApB,UAAApC,KAAA,IAAAgC,kBAAA,CAAAI,UAAAnC,KAAA,EAAA,OAAA,KAAAgC,eAAA,KAAA,IAAA,MAAAG,WAAAuB,OAAA,GAAA,KAAA,IAAA,MAAAvB,WAAAuB,OAAA,GAAA,KAAA,IANLC,cAAA,WAAA,MAAA/D,oBAAAC,MAAA,SAAA+D,WAAA,OAAA,OAAAA,UAAA7D,KAAA6D,UAAA5D,MAAA,IAAA,GAAA,MAAA4D,WAAA5D,KAAA,EAAAJ,mBAAA0C,MAAAnF,KAAA0G,WAAA,KAAA,GAAA,IAAA,MAAA,MAAAD,WAAA3D,SAAA,KAAArE,OAMK,KAAA,IAAA,IAAA,MAAA,MAAAuG,WAAAlC,SAAA,KAAArE,OAAA,EAAA,EAAA,GAAA,KAAA,GAAA,CAAA,GAAA,OA7YjC,KAAA,GAAA,IAAA,MAAA,MAAAqF,YAAAhB,SAAA,KAAArE,SAAAgB,IAAA,OAAAkH,IAAA,SAoBEhH,OACA,GAAA,kBAAKR,OACL,GAAAQ,MAAKP,KAAAA,CAEL,GAAAX,KAAKa,QAALK,MAAAV,MAEA,KAAKD,IAAAA,OAAYO,KAAjBP,YAAAC,KAAA,IAAAR,KAAAS,MAAA,WAAAS,MAAAV,KAAA,kBAKDR,MAAAU,QAAAQ,MAAAV,MAAAU,MACFlB,KAAAmI,kBAAAjH,WAvBiB,CAyBhB,GAAAV,MAAOA,MAAAA,MAAAA,IACL,KAAAA,KAsFA,KAAKe,IAAKb,OAAAA,KAAQF,YAAOA,KAAA,IAAAR,KAAAS,MAAA,6BAAAS,MAAAkH,WArFxBjH,IAAAA,KAAQN,OAAAL,MAERW,KAAQ,IAAAsB,OAAAzC,KAAAO,YAAAC,KAA+B,IAJnCR,KAAAS,MAAA,iBAAAD,KAAA,kBAzBSR,MAAAa,OAAAL,MAAAU,UA+GT,IAAP,YAAA,mBAAAA,OAAA,YAAApB,QAAAoB,QAAA,CAMD,IAAAA,MAGC,KAAIW,IAAAA,OAAJ7B,KAAAO,YAAAC,KAAA,IAAAR,KAAAS,MAAA,gCAxHgBT,MAAAuC,gBAAArB,YAThBD,IAAA,WAsIEY,GAAAA,QACAK,KAAAA,GAAAA,KAAQC,MAAAA,YACTkG,KAAA3C,KAAA1F,KAAAW,YAAA8C,GAECxB,IAAAA,qBACA,KAAA,GAAAI,KAAQR,MACN,GAAAwG,KAAAhG,GAAKiG,cACH,GAAqBrG,IAArBsG,kBAAK3H,OACN2H,kBAAA7C,MAAA2C,KAAAhG,SAEC,CACD,GAAAmG,MAAAD,kBAAAA,kBAAAnI,OAAA,EAEE,KARLoI,KAQKpI,OACHoI,KAAI9C,KAAK9E,KAAAA,IAGV4H,KAAAA,KAAApI,OAAA,GAAAkI,cACFE,KAAA9C,KAAA2C,KAAAhG,IAGAkG,kBAAA7C,MAAA2C,KAAAhG,SA3CGkG,mBAAkB7C,MAAM2C,KAAKhG,IAiD7BT,OAAAA,mBAAS1B,IAAYuI,SAAAA,GAAAA,MAAZC,GAAThH,IAAA,SAAA+B,GAAA,MAAAA,GAAAjD,OAAAmI,KAAA,YAjKJ3H,IAAA,SAAAE,MAAA,SASgBjB,OAAA2I,MAAAC,UAuPhB,GAAI5G,YAvPY,IAAA2G,MAAA,EAAA3G,SAAA4G,aAAA,KAAA5G,SAAAhC,QAAA4I,SAAAD,QAAAA,SAAA,GAAA3G,SAAAA,mBAAAhC,OAAAgC,SAAA,OAAAA,aAThBjB,IAAA,WAAAE,MAAA8C,mBAAAa,KAAA,QAAAiE,UASgBC,SAThB,GAAAC,KAAAC,EASgBC,KAAAC,OAThBC,2BAAAC,mBAAAC,gBAAAC,WAAAC,OAAAC,IASgBpH,EAThBlC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GASgB,EAAAuJ,OAThBvJ,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,MASgB0I,SAThB1I,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GASgB,SAAAkI,MAAA,MAAAA,MAAAM,KAAA,QAThB,OAAA3E,oBAAAc,KAAA,SAAA6E,YAAA,OAAA,OAAAA,WAAAxF,KAAAwF,WAAAvF,MAAA,IAAA,GAAA,GASgB+E,OAThB,WASgB,IAAA,GAAAS,QAAAF,OAAAG,EAAA,EAAAA,EAAAb,IAAAa,IAsVhBD,OAAAb,QAAAc,MACItI,GAAAA,IAAO,EAjEHqI,OAAOb,QAAQc,IAAMhB,SAASE,SAmEpCa,OAAAb,QAAAc,QAGED,OAAAA,OAAAb,QAAAc,KA5VYX,KAThB,WASgB,GAAAD,IAAA5G,EAAA,CAAA,GAAAyH,KAAAf,QAAA1G,EAAA0G,SAAA1G,GAAA0G,QAAAE,GAAAF,QAAAE,GAAAa,MAAAd,IAAAD,QAAA3I,OAAA6I,EAThB,SAwWI3D,GAAAA,IAAAA,GAxWJ,CAAAqE,WAAAvF,KAAA,EAAA,OAAA,MAAAuF,YAAAvF,KAAA,EAyWG2E,OAzWH,KAAA,GA2WII,SA3WJQ,WAAAvF,KAAA,EAAA,MAAA,KAAA,IA8WIkB,EAAAA,CA9WJ,KAAA,IAAA,KA8WIA,EAAAA,KA9WJ,CAAAqE,WAAAvF,KAAA,EAAA,OA8W6B8E,OA9W7BE,4BAAA,EAAAC,oBAAA,EAAAC,gBAAAjJ,OAAAsJ,WAAAxF,KAAA,GAAAoF,WA8WIvJ,KAAA8I,SAAAC,QAAA1G,EAAA,EAAAqH,QA9WJnC,OAAAC,WAAA,KAAA,IAAA,GAAA4B,4BAAAI,OAAAD,WAAAnF,QAAAqD,KAAA,CAAAkC,WAAAvF,KAAA,EAAA,OAAA,MA8W6BqF,KA9W7BD,OAAAtI,MAAAyI,WAAAvF,KAAA,GA+WG2E,OA/WH,KAAA,IAiXII,QAjXJ,KAAA,IAAAC,4BAAA,EAAAO,WAAAvF,KAAA,EAAA,MAAA,KAAA,IAAAuF,WAAAvF,KAAA,EAAA,MAAA,KAAA,IAAAuF,WAAAxF,KAAA,GAAAwF,WAAA9B,GAAA8B,WAAA,MAAA,IAAAN,oBAAA,EAAAC,gBAAAK,WAAA9B,EAAA,KAAA,IAAA8B,WAAAxF,KAAA,GAAAwF,WAAAxF,KAAA,IAAAiF,4BAAAG,WAAA5B,QAAA4B,WAAA5B,QAAA,KAAA,IAAA,GAAAgC,WAAAxF,KAAA,IAAAkF,mBAAA,CAAAM,WAAAvF,KAAA,EAAA,OAAA,KAAAkF,gBAAA,KAAA,IAAA,MAAAK,YAAA7B,OAAA,GAAA,KAAA,IAAA,MAAA6B,YAAA7B,OAAA,GAAA,KAAA,IAmXMxC,MAnXN,KAAA,IA8WIA,IA9WJqE,WAAAvF,KAAA,EAAA,MAAA,KAAA,IAAA,IAAA,MAAA,MAAAuF,YAAAtF,SAAAyE,SAAA9I,OAAA,GAAA,GAAA,GAAA,KAAA,GAAA,CAAA,GAAA,UAAAgB,IAAA,UAAAE,MAAA,SAsXgE6H,QAAAF,UA9DhE,GAAIa,WA8D4DK,4BAAA,EAAAC,oBAAA,EAAAC,gBAAA5J,MAAA,KAC5D,IAAA,GAAA6J,QAAAC,WAAAnK,KAAA8I,SAAAC,QAAA,EAAAW,OAAAb,UAAAtB,OAAAC,cAAAuC,4BAAAG,OAAAC,WAAA/F,QAAAqD,MAAAsC,4BAAA,EAAA,CAAAG,OAAAhJ,OAD4D,MAAAwG,KAAAsC,oBAAA,EAAAC,gBAAAvC,IAAA,QAAA,KAAAqC,4BAAAI,WAAAxC,QAAAwC,WAAAxC,SAAA,QAAA,GAAAqC,mBAAA,KAAAC,kBAE5DzF,MAAAA,YAxXJ5E,QA+Z0B,OAAAA","file":"Suite.min.js","sourcesContent":["/*\n@license https://github.com/t2ym/scenarist/blob/master/LICENSE.md\nCopyright (c) 2016, Tetsuya Mori <t2y3141592@gmail.com>. All rights reserved.\n*/\n\n(function (root, factory) {\n\n  'use strict';\n\n  /* istanbul ignore if: AMD is not tested */\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.Suite = root.Suite || factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.Suite = root.Suite || factory();\n  }\n\n}(this, function () {\n// UMD Definition above, do not remove this line\n  'use strict';\n\nclass Suite {\n  static get reconnectable() { return true; }\n  static get skipAfterFailure() { return false; }\n  constructor(target, description = target + ' suite') {\n    if (this.constructor.name === 'Suite') {\n      // suite instance\n      this.scope = target || '';\n      this.description = description;\n      this.classes = {};\n      this.leafClasses = {};\n      this.branchScenarios = {};\n      this.mixins = {};\n      this.constructor.scopes = this.constructor.scopes || {};\n      this.constructor.scopes[this.scope] = this;\n    }\n    else {\n      // test instance\n      this.target = target;\n    }\n  }\n  uncamel(name) {\n    return name\n      // insert a hyphen between lower & upper\n      .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n      // space before last upper in a sequence followed by lower\n      .replace(/\\b([A-Z]+)([A-Z])([a-z0-9])/, '$1 $2$3')\n      // lowercase\n      .toLowerCase();\n  }\n  set test(value) {\n    if (typeof value === 'function') {\n      if (value.name) {\n        // test class\n        if (this.classes[value.name]) {\n          // test class with the name already exists\n          throw new Error(this.constructor.name + '.' + this.scope + ': class ' + value.name + ' already exists');\n        }\n        else {\n          // register a new test class with the name\n          this.classes[value.name] = value;\n          this.updateLeafClasses(value);\n        }\n      }\n      else {\n        // test class mixin\n        let name = value(null).name;\n        if (name) {\n          if (this.mixins[name]) {\n            // test class mixin with the name already exists\n            throw new Error(this.constructor.name + '.' + this.scope + ': class mixin ' + name + ' already exists');\n          }\n          else {\n            // register a new test class mixin with the name\n            this.mixins[name] = value;\n          }\n        }\n        else {\n          // no name for the test class mixin\n          throw new Error(this.constructor.name + '.' + this.scope + ': class mixin has no name ' + value.toString());\n        }\n      }\n    }\n    else if (typeof value === 'object') {\n      if (value) {\n        // branch object\n        this.generateClasses(value, []);\n      }\n      else {\n        throw new Error(this.constructor.name + '.' + this.scope + ': null object is not expected');\n      }\n    }\n  }\n  get test() {\n    let list = [];\n    for (let c in this.leafClasses) {\n      list.push(this.leafClasses[c]);\n    }\n    let reconnectableList = [];\n    for (let i in list) {\n      if (list[i].reconnectable) {\n        if (reconnectableList.length === 0) {\n          reconnectableList.push([list[i]]);\n        }\n        else {\n          let last = reconnectableList[reconnectableList.length - 1];\n          if (last.length === 0) {\n            last.push(list[i]);\n          }\n          else {\n            if (last[last.length - 1].reconnectable) {\n              last.push(list[i]);\n            }\n            else {\n              reconnectableList.push([list[i]]);\n            }\n          }\n        }\n      }\n      else {\n        reconnectableList.push([list[i]]);\n      }\n    }\n    // [ 'UnreconnectableTest', 'ReconnectableTest,ReconnectableTest,...', 'UnreconnectableTest', ...]\n    return reconnectableList.map(l => l.map(c => c.name).join(','));\n  }\n  testClasses(tests) {\n    let self = this;\n    return (typeof tests === 'number' || tests.match(/^[0-9]$/) ? self.test[tests] : tests).split(/,/).map((name) => {\n      if (!self.classes[name]) {\n        throw new Error('Suite.' + self.scope + ': Test ' + name + ' is not defined');\n      }\n      return self.classes[name];\n    });\n  }\n  updateLeafClasses(value) {\n    let proto = value;\n    let chain = [];\n    let name = proto.name;\n    let isLeaf = true;\n    let scenario = '';\n    while (proto.name && proto.name !== 'Suite') {\n      chain.unshift(proto.name);\n      proto = Object.getPrototypeOf(proto);\n    }\n    for (let i in chain) {\n      scenario = scenario ? scenario + ',' + chain[i] : chain[i];\n      if (i < chain.length - 1) {\n        if (!this.branchScenarios[scenario]) {\n          this.branchScenarios[scenario] = true;\n        }\n        if (this.leafClasses[chain[i]]) {\n          delete this.leafClasses[chain[i]];\n        }\n      }\n      else {\n        if (this.branchScenarios[scenario]) {\n          isLeaf = false;\n        }\n      }\n    }\n    if (isLeaf) {\n      this.leafClasses[name] = value;\n    }\n  }\n  generateClasses(branch, chain) {\n    if (typeof branch === 'string') {\n      let description = branch.split(/;/);\n      if (description.length > 1) {\n        branch = description.shift();\n        description = description.join(';').replace(/^[\\s]*/, '');\n      }\n      else {\n        description = '';\n      }\n      if (this.constructor.debug) { console.log('string', branch || chain[chain.length - 1], chain, description); }\n      this.generateClass(branch, chain, description);\n    }\n    else if (typeof branch === 'object' && !Array.isArray(branch)) {\n      if (branch) {\n        for (let prop in branch) {\n          chain.push(prop);\n          this.generateClasses(branch[prop], chain);\n          chain.pop();\n        }\n      }\n      else {\n        if (this.constructor.debug) { console.log('null', branch, chain); }\n        this.generateClass(branch, chain);\n      }\n    }\n    else if (typeof branch === 'object' && Array.isArray(branch)) {\n      branch.forEach((item) => {\n        this.generateClasses(item, chain);\n      });\n    }\n    else {\n      throw new Error(this.constructor.name + '.' + this.scope + ': unknown branch type ' + typeof branch + branch);\n    }\n  }\n  generateClass(name, chain, description) {\n    let self = this;\n    let expression;\n    if (!(chain.length >= (chain[0] ? 1 : 2))) {\n      throw new Error(this.constructor.name + '.' + this.scope + ':generateClass invalid chain.length ' + chain.length);\n    }\n    if (!name) {\n      name = chain[chain.length - 1];\n    }\n    if (!chain[0]) {\n      // class mixin\n      if (self.mixins[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        if (i === 0) {\n          expression = 'base';\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      expression = 'return (base) => ' + expression;\n      self.mixins[name] = (new Function('self', expression))(self);\n      if (self.constructor.debug) { console.log('generateClass mixins.' + name + ' = ' + expression); }\n    }\n    else {\n      // class\n      if (this.classes[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass class ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        if (i === 0) {\n          if (self.classes[c]) {\n            expression = 'self.classes.' + c;\n          }\n          else if ((new Function('return (typeof ' + c + ' === \"function\" && (new ' + c + '()) instanceof ' + self.constructor.name + ')'))()) {\n            expression = c;\n          }\n          else {\n            throw new Error(this.constructor.name + '.' + this.scope + ':generateClass global test class ' + c + ' does not exist');\n          }\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      expression = chain.length === 1 && name === expression\n        ? 'return ' + name\n        : name === chain[chain.length - 1]\n          ? 'return ' + expression\n          : 'return class ' + name + ' extends ' + expression + (description ? ' { get description() { return \"' + description.replace(/\"/g,'\\\\\"') + '\"; } }' : ' {}');\n      self.classes[name] = (new Function('self', expression))(self);\n      self.updateLeafClasses(self.classes[name]);\n      if (self.constructor.debug) { console.log('generateClass classes.' + name + ' = ' + expression); }\n    }\n  }\n  static repeat(target, count, subclass) {\n    let scenario = {};\n    if (count < 1) {\n      scenario = subclass;\n    }\n    else {\n      scenario[target] = subclass;\n      count--;\n      while (count-- > 0) {\n        scenario = {\n          [target]: scenario\n        };\n      }\n    }\n    return scenario;\n  }\n  static * _permute(targets, i = 0, result = {}, subclass = (list) => list.join('Then')) {\n    let len = targets.length;\n    let j;\n    function swap() {\n      if (j !== i) {\n        let tmp = targets[i];\n        targets[i] = targets[j];\n        targets[j] = tmp;\n      }\n    }\n    function append() {\n      // TODO: cache cursor\n      let cursor = result;\n      for (let k = 0; k < len; k++) {\n        if (!cursor[targets[k]]) {\n          if (k >= len - 1) {\n            cursor[targets[k]] = subclass(targets);\n          }\n          else {\n            cursor[targets[k]] = {};\n          }\n        }\n        cursor = cursor[targets[k]];\n      }\n    }\n    if (i >= len - 1) {\n      yield targets;\n      append();\n    }\n    else {\n      for (j = i; j < len; j++) {\n        swap();\n        for (let sub of this._permute(targets, i + 1, result)) {\n          yield targets;\n          append();\n        }\n        swap();\n      }\n    }\n  }\n  static permute(targets, subclass) {\n    let result = {};\n    for (let chain of this._permute(targets, 0, result, subclass)) {}\n    return result;\n  }\n  async setup() {\n  }\n  forEvent(element, type, trigger, condition) {\n    return new Promise(resolve => {\n      element.addEventListener(type, function onEvent(event) {\n        if (!condition ||\n            (typeof condition === 'boolean' && condition && Polymer.dom(event).rootTarget === element) ||\n            (typeof condition === 'function' && condition(element, type, event))) {\n          element.removeEventListener(type, onEvent);\n          resolve(event);\n        }\n      });\n      if (trigger) {\n        trigger();\n      }\n    })\n  }\n  * scenario() {\n    // trick to unveil overridden methods\n    let steps = [];\n    let proto = Object.getPrototypeOf(this);\n    while (proto.constructor.name && proto.constructor.name !== 'Object') {\n      steps.unshift({\n        name: proto.hasOwnProperty('description') ? proto.description : this.uncamel(proto.constructor.name),\n        iteration: proto.hasOwnProperty('iteration') ? proto.iteration : undefined,\n        operation: proto.hasOwnProperty('operation') ? proto.operation : undefined,\n        checkpoint: proto.hasOwnProperty('checkpoint') ? proto.checkpoint: undefined\n      });\n      proto = Object.getPrototypeOf(proto);\n    }\n    yield * steps;\n  }\n  async teardown() {\n  }\n  async run(classes, target) {\n    // TODO: return a Promise object?\n    let self = this;\n    if (self.constructor.name === 'Suite') {\n      // Suite Runner\n      let testSuites = [];\n      if (typeof classes === 'number' || typeof classes === 'string') {\n        // Number 0\n        // Number string '0'\n        // CSV string 'Test1,Test2'\n        testSuites = self.testClasses(classes);\n      }\n      else if (typeof classes === 'object' && Array.isArray(classes)) {\n        // String Array [ 'Test1', 'Test2' ]\n        // Class Array [ Test1, Test2 ]\n        // TODO: handle errors if item is neither a string nor a class\n        testSuites = classes.map((item) => typeof item === 'string' ? self.classes[item] : item);\n      }\n      else if (typeof classes === 'object' && !Array.isArray(classes) && classes) {\n        // Object { Test1: Test1, Test2: Test2 } - property names are discarded\n        for (let c in classes) {\n          testSuites.push(classes[c]);\n        }\n      }\n      suite(self.description || (self.scope + ' suite'), function() {\n        // Note: Not waiting for async forEach so that each subsuite runs under the parent suite\n        Promise.all(testSuites.map(async (s) => (new s(target)).run()))\n          .then(() => {\n            if (self.constructor.debug) { console.log(self.description + ' done for ', classes); }\n          });\n      });\n    }\n    else {\n      // Scenario Runner\n      suite(Object.getOwnPropertyDescriptor(Object.getPrototypeOf(self), 'description') ? self.description : self.uncamel(self.constructor.name), async function () {\n        suiteSetup(async function () {\n          await self.setup();\n        });\n\n        for (let step of self.scenario()) {\n          if (step.operation || step.checkpoint) {\n            if (step.iteration) {\n              // suite() has to be commented out since subsuites are executed after all the other sibling tests\n              //suite(step.name + ' iterations', async function () {\n                for (let parameters of step.iteration.apply(self)) {\n                  test(parameters.name ?\n                        (typeof parameters.name === 'function' ? parameters.name(parameters) : parameters.name)\n                        : step.name, async function() {\n                    if (self.constructor.skipAfterFailure && self.__failed) {\n                      this.skip();\n                      return;\n                    }\n                    self.__failed = true;\n                    if (step.operation) {\n                      await step.operation.call(self, parameters);\n                    }\n                    if (step.checkpoint) {\n                      await step.checkpoint.call(self, parameters);\n                    }\n                    self.__failed = false;\n                  });\n                }\n              //});\n            }\n            else {\n              test(step.name, async function() {\n                if (self.constructor.skipAfterFailure && self.__failed) {\n                  this.skip();\n                  return;\n                }\n                self.__failed = true;\n                if (step.operation) {\n                  await step.operation.call(self);\n                }\n                if (step.checkpoint) {\n                  await step.checkpoint.call(self);\n                }\n                self.__failed = false;\n              });\n            }\n          }\n        }\n\n        suiteTeardown(async function () {\n          await self.teardown();\n        });\n      });\n    }\n  }\n}\n\n  return Suite;\n})); // UMD Definition\n"]}