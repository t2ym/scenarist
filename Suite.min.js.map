{"version":3,"sources":["Suite.js"],"names":["root","factory","define","amd","Suite","exports","_typeof","module","e","_createClass","require","default","_classCallCheck","_possibleConstructorReturn","_inherits","target","description","arguments","length","undefined","this","_name","constructor","scope","classes","leafClasses","branchScenarios","mixins","scopes","classSyntaxSupport","arrowFunctionSupport","Function","key","get","value","name","replace","toLowerCase","tests","chain","generateClasses","branch","match","self","test","split","map","Error","generateClass","proto","forEach","isLeaf","scenario","unshift","Object","getPrototypeOf","i","expression","_this","shift","join","console","debug","log","Array","isArray","item","prop","push","c","prefix","resolve","trigger","_this2","steps","operation","checkpoint","hasOwnProperty","window","updateLeafClasses","element","addEventListener","event","condition","Polymer","regeneratorRuntime","async","_context","prev","next","stop","type","Promise","onEvent","dom","rootTarget","removeEventListener","mark","wrap","_context2","skipAfterFailure","__failed","iteration","delegateYield","_context3","_context10","testSuites","testClasses","suite","describe","_this3","all","s","_context4","abrupt","run","then","getOwnPropertyDescriptor","uncamel","_loop","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","step","_context9","suiteSetup","before","_context5","awrap","setup","_loop2","parameters","it","_context7","skip","call","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","apply","Symbol","iterator","done","err","return","_context8","t0","finish","suiteTeardown","after","_context6","teardown","set","toString","list","reconnectableList","reconnectable","last","l","func","count","subclass","_permute","targets","len","j","swap","append","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","sub","result","_context11","cursor","k","tmp","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4"],"mappings":"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","file":"Suite.min.js","sourcesContent":["/*\n@license https://github.com/t2ym/scenarist/blob/master/LICENSE.md\nCopyright (c) 2016, Tetsuya Mori <t2y3141592@gmail.com>. All rights reserved.\n*/\n\n(function (root, factory) {\n\n  'use strict';\n\n  /* istanbul ignore if: AMD is not tested */\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.Suite = root.Suite || factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n    try {\n      new Function('return class $$A$$ {}');\n    }\n    catch (e) {\n      // Supply Babel runtime helpers\n      module.exports._createClass = module.exports._createClass || require('babel-runtime/helpers/_create-class.js').default;\n      module.exports._classCallCheck = module.exports._classCallCheck || require('babel-runtime/helpers/_class-call-check.js').default;\n      module.exports._possibleConstructorReturn = module.exports._possibleConstructorReturn || require('babel-runtime/helpers/_possible-constructor-return.js').default;\n      module.exports._inherits = module.exports._inherits || require('babel-runtime/helpers/_inherits.js').default;\n    }\n  } else {\n    // Browser globals\n    root.Suite = root.Suite || factory();\n  }\n\n}(this, function () {\n// UMD Definition above, do not remove this line\n  'use strict';\n\nclass Suite {\n  static get reconnectable() { return true; }\n  static get skipAfterFailure() { return false; }\n  constructor(target, description = target + ' suite') {\n    if (Suite._name(this.constructor) === 'Suite') {\n      // suite instance\n      this.scope = target || '';\n      this.description = description;\n      this.classes = {};\n      this.leafClasses = {};\n      this.branchScenarios = {};\n      this.mixins = {};\n      this.constructor.scopes = this.constructor.scopes || {};\n      this.constructor.scopes[this.scope] = this;\n      this.classSyntaxSupport = true;\n      this.arrowFunctionSupport = true;\n      try {\n        new Function('return class A {}');\n      }\n      catch (e) {\n        this.classSyntaxSupport = false;\n      }\n      try {\n        new Function('return () => 1');\n      }\n      catch (e) {\n        this.arrowFunctionSupport = false;\n      }\n    }\n    else {\n      // test instance\n      this.target = target;\n    }\n  }\n  uncamel(name) {\n    return name.replace(/([A-Z])/g, ' $1').replace(/_/g, ' ').replace(/[ ]{1,}/g, ' ').replace(/^ /, '').toLowerCase();\n  }\n  static _name(func) {\n    return func.hasOwnProperty('name')\n      ? func.name\n      : func.toString().replace(/^[\\S\\s]*?function\\s*/, \"\").replace(/[\\s\\(\\/][\\S\\s]+$/, \"\");\n  }\n  set test(value) {\n    if (typeof value === 'function') {\n      let name = Suite._name(value);\n      if (name) {\n        // test class\n        if (this.classes[name]) {\n          // test class with the name already exists\n          throw new Error(this.constructor.name + '.' + this.scope + ': class ' + value.name + ' already exists');\n        }\n        else {\n          // register a new test class with the name\n          this.classes[name] = value;\n          this.updateLeafClasses(value);\n        }\n      }\n      else {\n        // test class mixin\n        name = Suite._name(value(null));\n        if (name) {\n          if (this.mixins[name]) {\n            // test class mixin with the name already exists\n            throw new Error(this.constructor.name + '.' + this.scope + ': class mixin ' + name + ' already exists');\n          }\n          else {\n            // register a new test class mixin with the name\n            this.mixins[name] = value;\n          }\n        }\n        else {\n          // no name for the test class mixin\n          throw new Error(this.constructor.name + '.' + this.scope + ': class mixin has no name ' + value.toString());\n        }\n      }\n    }\n    else if (typeof value === 'object') {\n      if (value) {\n        // branch object\n        this.generateClasses(value, []);\n      }\n      else {\n        throw new Error(this.constructor.name + '.' + this.scope + ': null object is not expected');\n      }\n    }\n  }\n  get test() {\n    let list = [];\n    for (let c in this.leafClasses) {\n      list.push(this.leafClasses[c]);\n    }\n    let reconnectableList = [];\n    for (let i in list) {\n      if (list[i].reconnectable) {\n        if (reconnectableList.length === 0) {\n          reconnectableList.push([list[i]]);\n        }\n        else {\n          let last = reconnectableList[reconnectableList.length - 1];\n          if (last.length === 0) {\n            last.push(list[i]);\n          }\n          else {\n            if (last[last.length - 1].reconnectable) {\n              last.push(list[i]);\n            }\n            else {\n              reconnectableList.push([list[i]]);\n            }\n          }\n        }\n      }\n      else {\n        reconnectableList.push([list[i]]);\n      }\n    }\n    // [ 'UnreconnectableTest', 'ReconnectableTest,ReconnectableTest,...', 'UnreconnectableTest', ...]\n    return reconnectableList.map(l => l.map(c => Suite._name(c)).join(','));\n  }\n  testClasses(tests) {\n    let self = this;\n    return (typeof tests === 'number' || tests.match(/^[0-9]$/) ? self.test[tests] : tests).split(/,/).map((name) => {\n      if (!self.classes[name]) {\n        throw new Error('Suite.' + self.scope + ': Test ' + name + ' is not defined');\n      }\n      return self.classes[name];\n    });\n  }\n  updateLeafClasses(value) {\n    let proto = value;\n    let chain = [];\n    let name = Suite._name(proto);\n    let isLeaf = true;\n    let scenario = '';\n    while (Suite._name(proto) && Suite._name(proto) !== 'Suite') {\n      chain.unshift(Suite._name(proto));\n      proto = Object.getPrototypeOf(proto);\n    }\n    for (let i in chain) {\n      scenario = scenario ? scenario + ',' + chain[i] : chain[i];\n      if (i < chain.length - 1) {\n        if (!this.branchScenarios[scenario]) {\n          this.branchScenarios[scenario] = true;\n        }\n        if (this.leafClasses[chain[i]]) {\n          delete this.leafClasses[chain[i]];\n        }\n      }\n      else {\n        if (this.branchScenarios[scenario]) {\n          isLeaf = false;\n        }\n      }\n    }\n    if (isLeaf) {\n      this.leafClasses[name] = value;\n    }\n  }\n  generateClasses(branch, chain) {\n    if (typeof branch === 'string') {\n      let description = branch.split(/;/);\n      if (description.length > 1) {\n        branch = description.shift();\n        description = description.join(';').replace(/^[\\s]*/, '');\n      }\n      else {\n        description = '';\n      }\n      if (this.constructor.debug) { console.log('string', branch || chain[chain.length - 1], chain, description); }\n      this.generateClass(branch, chain, description);\n    }\n    else if (typeof branch === 'object' && !Array.isArray(branch)) {\n      if (branch) {\n        for (let prop in branch) {\n          chain.push(prop);\n          this.generateClasses(branch[prop], chain);\n          chain.pop();\n        }\n      }\n      else {\n        if (this.constructor.debug) { console.log('null', branch, chain); }\n        this.generateClass(branch, chain);\n      }\n    }\n    else if (typeof branch === 'object' && Array.isArray(branch)) {\n      branch.forEach((item) => {\n        this.generateClasses(item, chain);\n      });\n    }\n    else {\n      throw new Error(this.constructor.name + '.' + this.scope + ': unknown branch type ' + typeof branch + branch);\n    }\n  }\n  generateClass(name, chain, description) {\n    let self = this;\n    let expression;\n    if (!(chain.length >= (chain[0] ? 1 : 2))) {\n      throw new Error(this.constructor.name + '.' + this.scope + ':generateClass invalid chain.length ' + chain.length);\n    }\n    if (!name) {\n      name = chain[chain.length - 1];\n    }\n    if (!chain[0]) {\n      // class mixin\n      if (self.mixins[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        if (i === 0) {\n          expression = 'base';\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      expression = self.arrowFunctionSupport\n        ? 'return (base) => ' + expression\n        : 'return function (base) { return ' + expression + '; }';\n      self.mixins[name] = (new Function('self', expression))(self);\n      if (self.constructor.debug) { console.log('generateClass mixins.' + name + ' = ' + expression); }\n    }\n    else {\n      // class\n      if (this.classes[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass class ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        if (i === 0) {\n          if (self.classes[c]) {\n            expression = 'self.classes.' + c;\n          }\n          else if ((new Function('return (typeof ' + c + ' === \"function\" && (new ' + c + '()) instanceof ' + self.constructor.name + ')'))()) {\n            expression = c;\n          }\n          else {\n            throw new Error(this.constructor.name + '.' + this.scope + ':generateClass global test class ' + c + ' does not exist');\n          }\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      if (description) {\n        description = description.replace(/\"/g,'\\\\\"').replace(/\\n/g, ' ');\n      }\n      let prefix = !this.classSyntaxSupport && typeof Suite._createClass === 'function' && typeof window !== 'object' ? 'self.constructor.' : '';\n      expression = chain.length === 1 && name === expression\n        ? 'return ' + name\n        : name === chain[chain.length - 1]\n          ? 'return ' + expression\n          : self.classSyntaxSupport\n            ? 'return class ' + name + ' extends ' + expression + (description ? ' { get description() { return \"' + description + '\"; } }' : ' {}')\n            : description\n              // TODO: Simplify ES5 classes without Babel helper functions\n              ? `return function (_base) {\n                  ${prefix}_inherits(${name}, _base);\n                  function ${name}() {\n                    ${prefix}_classCallCheck(this, ${name});\n                    return ${prefix}_possibleConstructorReturn(this, (${name}.__proto__ || Object.getPrototypeOf(${name})).apply(this, arguments));\n                  }\n                  ${prefix}_createClass(${name}, [{ key: 'description', get: function get() { return \"${description}\"; } }]);\n                  return ${name};\n                }(${expression})`\n              : `return function (_base) {\n                  ${prefix}_inherits(${name}, _base);\n                  function ${name}() {\n                    ${prefix}_classCallCheck(this, ${name});\n                    return ${prefix}_possibleConstructorReturn(this, (${name}.__proto__ || Object.getPrototypeOf(${name})).apply(this, arguments));\n                  }\n                  return ${name};\n                }(${expression})`;\n      self.classes[name] = (new Function('self', expression))(self);\n      self.updateLeafClasses(self.classes[name]);\n      if (self.constructor.debug) { console.log('generateClass classes.' + name + ' = ' + expression); }\n    }\n  }\n  static repeat(target, count, subclass) {\n    let scenario = {};\n    if (count < 1) {\n      scenario = subclass;\n    }\n    else {\n      scenario[target] = subclass;\n      count--;\n      while (count-- > 0) {\n        scenario = {\n          [target]: scenario\n        };\n      }\n    }\n    return scenario;\n  }\n  static * _permute(targets, i = 0, result = {}, subclass = (list) => list.join('Then')) {\n    let len = targets.length;\n    let j;\n    function swap() {\n      if (j !== i) {\n        let tmp = targets[i];\n        targets[i] = targets[j];\n        targets[j] = tmp;\n      }\n    }\n    function append() {\n      // TODO: cache cursor\n      let cursor = result;\n      for (let k = 0; k < len; k++) {\n        if (!cursor[targets[k]]) {\n          if (k >= len - 1) {\n            cursor[targets[k]] = subclass(targets);\n          }\n          else {\n            cursor[targets[k]] = {};\n          }\n        }\n        cursor = cursor[targets[k]];\n      }\n    }\n    if (i >= len - 1) {\n      yield targets;\n      append();\n    }\n    else {\n      for (j = i; j < len; j++) {\n        swap();\n        for (let sub of this._permute(targets, i + 1, result)) {\n          yield targets;\n          append();\n        }\n        swap();\n      }\n    }\n  }\n  static permute(targets, subclass) {\n    let result = {};\n    for (let chain of this._permute(targets, 0, result, subclass)) {}\n    return result;\n  }\n  async setup() {\n  }\n  forEvent(element, type, trigger, condition) {\n    return new Promise(resolve => {\n      element.addEventListener(type, function onEvent(event) {\n        if (!condition ||\n            (typeof condition === 'boolean' && condition && Polymer.dom(event).rootTarget === element) ||\n            (typeof condition === 'function' && condition(element, type, event))) {\n          element.removeEventListener(type, onEvent);\n          resolve(event);\n        }\n      });\n      if (trigger) {\n        trigger();\n      }\n    })\n  }\n  * scenario() {\n    // trick to unveil overridden methods\n    let steps = [];\n    let proto = Object.getPrototypeOf(this);\n    while (proto.constructor.name && proto.constructor.name !== 'Object') {\n      steps.unshift({\n        name: proto.hasOwnProperty('description') ? proto.description : this.uncamel(Suite._name(proto.constructor)),\n        iteration: proto.hasOwnProperty('iteration') ? proto.iteration : undefined,\n        operation: proto.hasOwnProperty('operation') ? proto.operation : undefined,\n        checkpoint: proto.hasOwnProperty('checkpoint') ? proto.checkpoint: undefined\n      });\n      proto = Object.getPrototypeOf(proto);\n    }\n    yield * steps;\n  }\n  async teardown() {\n  }\n  async run(classes, target) {\n    // TODO: return a Promise object?\n    let self = this;\n    if (Suite._name(self.constructor) === 'Suite') {\n      // Suite Runner\n      let testSuites = [];\n      if (typeof classes === 'number' || typeof classes === 'string') {\n        // Number 0\n        // Number string '0'\n        // CSV string 'Test1,Test2'\n        testSuites = self.testClasses(classes);\n      }\n      else if (typeof classes === 'object' && Array.isArray(classes)) {\n        // String Array [ 'Test1', 'Test2' ]\n        // Class Array [ Test1, Test2 ]\n        // TODO: handle errors if item is neither a string nor a class\n        testSuites = classes.map((item) => typeof item === 'string' ? self.classes[item] : item);\n      }\n      else if (typeof classes === 'object' && !Array.isArray(classes) && classes) {\n        // Object { Test1: Test1, Test2: Test2 } - property names are discarded\n        for (let c in classes) {\n          testSuites.push(classes[c]);\n        }\n      }\n      (typeof suite === 'function' ? suite : describe)(self.description || (self.scope + ' suite'), function() {\n        // Note: Not waiting for async forEach so that each subsuite runs under the parent suite\n        Promise.all(testSuites.map(async (s) => (new s(target)).run()))\n          .then(() => {\n            if (self.constructor.debug) { console.log(self.description + ' done for ', classes); }\n          });\n      });\n    }\n    else {\n      // Scenario Runner\n      (typeof suite === 'function' ? suite : describe)(Object.getOwnPropertyDescriptor(Object.getPrototypeOf(self), 'description') ? self.description : self.uncamel(Suite._name(self.constructor)), async function () {\n        (typeof suiteSetup === 'function' ? suiteSetup : before)(async function () {\n          await self.setup();\n        });\n\n        for (let step of self.scenario()) {\n          if (step.operation || step.checkpoint) {\n            if (step.iteration) {\n              // suite() has to be commented out since subsuites are executed after all the other sibling tests\n              //suite(step.name + ' iterations', async function () {\n                for (let parameters of step.iteration.apply(self)) {\n                  (typeof test === 'function' ? test : it)(parameters.name ?\n                        (typeof parameters.name === 'function' ? parameters.name(parameters) : parameters.name)\n                        : step.name, async function() {\n                    if (self.constructor.skipAfterFailure && self.__failed) {\n                      this.skip();\n                      return;\n                    }\n                    self.__failed = true;\n                    if (step.operation) {\n                      await step.operation.call(self, parameters);\n                    }\n                    if (step.checkpoint) {\n                      await step.checkpoint.call(self, parameters);\n                    }\n                    self.__failed = false;\n                  });\n                }\n              //});\n            }\n            else {\n              (typeof test === 'function' ? test : it)(step.name, async function() {\n                if (self.constructor.skipAfterFailure && self.__failed) {\n                  this.skip();\n                  return;\n                }\n                self.__failed = true;\n                if (step.operation) {\n                  await step.operation.call(self);\n                }\n                if (step.checkpoint) {\n                  await step.checkpoint.call(self);\n                }\n                self.__failed = false;\n              });\n            }\n          }\n        }\n\n        (typeof suiteTeardown === 'function' ? suiteTeardown : after)(async function () {\n          await self.teardown();\n        });\n      });\n    }\n  }\n}\n\n  return Suite;\n})); // UMD Definition\n"]}