{"version":3,"sources":["Suite.js"],"names":["root","factory","define","amd","Suite","exports","_typeof","module","this","target","description","arguments","length","undefined","_classCallCheck","constructor","name","scope","classes","leafClasses","branchScenarios","mixins","scopes","_createClass","key","get","value","replace","toLowerCase","tests","match","self","test","split","map","console","generateClass","chain","branch","generateClasses","proto","scenario","unshift","forEach","item","i","Error","expression","isLeaf","_this","shift","join","log","Array","isArray","prop","push","pop","_this2","c","Function","steps","operation","hasOwnProperty","getPrototypeOf","updateLeafClasses","Promise","element","resolve","regeneratorRuntime","async","_context","prev","next","stop","type","trigger","condition","event","Polymer","dom","rootTarget","removeEventListener","onEvent","mark","wrap","_context2","Object","setup","iteration","checkpoint","delegateYield","_context3","_context10","parameters","testSuites","testClasses","suite","_this3","all","s","_context4","abrupt","run","then","getOwnPropertyDescriptor","call","_loop","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","step","_context9","suiteSetup","_context5","awrap","_loop2","_context7","skipAfterFailure","__failed","skip","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","apply","Symbol","iterator","done","err","return","_context8","t0","finish","suiteTeardown","_context6","teardown","set","toString","list","reconnectable","reconnectableList","last","l","count","subclass","_permute","targets","len","j","swap","append","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","sub","_context11","cursor","result","k","tmp","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4"],"mappings":"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","file":"Suite.min.js","sourcesContent":["/*\n@license https://github.com/t2ym/scenarist/blob/master/LICENSE.md\nCopyright (c) 2016, Tetsuya Mori <t2y3141592@gmail.com>. All rights reserved.\n*/\n\n(function (root, factory) {\n\n  'use strict';\n\n  /* istanbul ignore if: AMD is not tested */\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.Suite = root.Suite || factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.Suite = root.Suite || factory();\n  }\n\n}(this, function () {\n// UMD Definition above, do not remove this line\n  'use strict';\n\nclass Suite {\n  static get reconnectable() { return true; }\n  static get skipAfterFailure() { return false; }\n  constructor(target, description = target + ' suite') {\n    if (this.constructor.name === 'Suite') {\n      // suite instance\n      this.scope = target || '';\n      this.description = description;\n      this.classes = {};\n      this.leafClasses = {};\n      this.branchScenarios = {};\n      this.mixins = {};\n      this.constructor.scopes = this.constructor.scopes || {};\n      this.constructor.scopes[this.scope] = this;\n    }\n    else {\n      // test instance\n      this.target = target;\n    }\n  }\n  uncamel(name) {\n    return name\n      // insert a hyphen between lower & upper\n      .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n      // space before last upper in a sequence followed by lower\n      .replace(/\\b([A-Z]+)([A-Z])([a-z0-9])/, '$1 $2$3')\n      // lowercase\n      .toLowerCase();\n  }\n  set test(value) {\n    if (typeof value === 'function') {\n      if (value.name) {\n        // test class\n        if (this.classes[value.name]) {\n          // test class with the name already exists\n          throw new Error(this.constructor.name + '.' + this.scope + ': class ' + value.name + ' already exists');\n        }\n        else {\n          // register a new test class with the name\n          this.classes[value.name] = value;\n          this.updateLeafClasses(value);\n        }\n      }\n      else {\n        // test class mixin\n        let name = value(null).name;\n        if (name) {\n          if (this.mixins[name]) {\n            // test class mixin with the name already exists\n            throw new Error(this.constructor.name + '.' + this.scope + ': class mixin ' + name + ' already exists');\n          }\n          else {\n            // register a new test class mixin with the name\n            this.mixins[name] = value;\n          }\n        }\n        else {\n          // no name for the test class mixin\n          throw new Error(this.constructor.name + '.' + this.scope + ': class mixin has no name ' + value.toString());\n        }\n      }\n    }\n    else if (typeof value === 'object') {\n      if (value) {\n        // branch object\n        this.generateClasses(value, []);\n      }\n      else {\n        throw new Error(this.constructor.name + '.' + this.scope + ': null object is not expected');\n      }\n    }\n  }\n  get test() {\n    let list = [];\n    for (let c in this.leafClasses) {\n      list.push(this.leafClasses[c]);\n    }\n    let reconnectableList = [];\n    for (let i in list) {\n      if (list[i].reconnectable) {\n        if (reconnectableList.length === 0) {\n          reconnectableList.push([list[i]]);\n        }\n        else {\n          let last = reconnectableList[reconnectableList.length - 1];\n          if (last.length === 0) {\n            last.push(list[i]);\n          }\n          else {\n            if (last[last.length - 1].reconnectable) {\n              last.push(list[i]);\n            }\n            else {\n              reconnectableList.push([list[i]]);\n            }\n          }\n        }\n      }\n      else {\n        reconnectableList.push([list[i]]);\n      }\n    }\n    // [ 'UnreconnectableTest', 'ReconnectableTest,ReconnectableTest,...', 'UnreconnectableTest', ...]\n    return reconnectableList.map(l => l.map(c => c.name).join(','));\n  }\n  testClasses(tests) {\n    let self = this;\n    return (typeof tests === 'number' || tests.match(/^[0-9]$/) ? self.test[tests] : tests).split(/,/).map((name) => {\n      if (!self.classes[name]) {\n        throw new Error('Suite.' + self.scope + ': Test ' + name + ' is not defined');\n      }\n      return self.classes[name];\n    });\n  }\n  updateLeafClasses(value) {\n    let proto = value;\n    let chain = [];\n    let name = proto.name;\n    let isLeaf = true;\n    let scenario = '';\n    while (proto.name && proto.name !== 'Suite') {\n      chain.unshift(proto.name);\n      proto = Object.getPrototypeOf(proto);\n    }\n    for (let i in chain) {\n      scenario = scenario ? scenario + ',' + chain[i] : chain[i];\n      if (i < chain.length - 1) {\n        if (!this.branchScenarios[scenario]) {\n          this.branchScenarios[scenario] = true;\n        }\n        if (this.leafClasses[chain[i]]) {\n          delete this.leafClasses[chain[i]];\n        }\n      }\n      else {\n        if (this.branchScenarios[scenario]) {\n          isLeaf = false;\n        }\n      }\n    }\n    if (isLeaf) {\n      this.leafClasses[name] = value;\n    }\n  }\n  generateClasses(branch, chain) {\n    if (typeof branch === 'string') {\n      let description = branch.split(/;/);\n      if (description.length > 1) {\n        branch = description.shift();\n        description = description.join(';').replace(/^[\\s]*/, '');\n      }\n      else {\n        description = '';\n      }\n      console.log('string', branch || chain[chain.length - 1], chain, description);\n      this.generateClass(branch, chain, description);\n    }\n    else if (typeof branch === 'object' && !Array.isArray(branch)) {\n      if (branch) {\n        for (let prop in branch) {\n          chain.push(prop);\n          this.generateClasses(branch[prop], chain);\n          chain.pop();\n        }\n      }\n      else {\n        console.log('null', branch, chain);\n        this.generateClass(branch, chain);\n      }\n    }\n    else if (typeof branch === 'object' && Array.isArray(branch)) {\n      branch.forEach((item) => {\n        this.generateClasses(item, chain);\n      });\n    }\n    else {\n      throw new Error(this.constructor.name + '.' + this.scope + ': unknown branch type ' + typeof branch + branch);\n    }\n  }\n  generateClass(name, chain, description) {\n    let self = this;\n    let expression;\n    if (!(chain.length >= (chain[0] ? 1 : 2))) {\n      throw new Error(this.constructor.name + '.' + this.scope + ':generateClass invalid chain.length ' + chain.length);\n    }\n    if (!name) {\n      name = chain[chain.length - 1];\n    }\n    if (!chain[0]) {\n      // class mixin\n      if (self.mixins[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        if (i === 0) {\n          expression = 'base';\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      expression = 'return (base) => ' + expression;\n      self.mixins[name] = (new Function('self', expression))(self);\n      console.log('generateClass mixins.' + name + ' = ' + expression);\n    }\n    else {\n      // class\n      if (this.classes[name]) {\n        throw new Error(this.constructor.name + '.' + this.scope + ':generateClass class ' + name + ' already exists');\n      }\n      chain.forEach((c, i) => {\n        if (i === 0) {\n          if (self.classes[c]) {\n            expression = 'self.classes.' + c;\n          }\n          else if ((new Function('return (typeof ' + c + ' === \"function\" && (new ' + c + '()) instanceof ' + self.constructor.name + ')'))()) {\n            expression = c;\n          }\n          else {\n            throw new Error(this.constructor.name + '.' + this.scope + ':generateClass global test class ' + c + ' does not exist');\n          }\n        }\n        else if (self.mixins[c]) {\n          expression = 'self.mixins.' + c + '(' + expression + ')';\n        }\n        else {\n          throw new Error(this.constructor.name + '.' + this.scope + ':generateClass mixin ' + c + ' does not exist');\n        }\n      });\n      expression = chain.length === 1 && name === expression\n        ? 'return ' + name\n        : name === chain[chain.length - 1]\n          ? 'return ' + expression\n          : 'return class ' + name + ' extends ' + expression + (description ? ' { get description() { return \"' + description.replace(/\"/g,'\\\\\"') + '\"; } }' : ' {}');\n      self.classes[name] = (new Function('self', expression))(self);\n      self.updateLeafClasses(self.classes[name]);\n      console.log('generateClass classes.' + name + ' = ' + expression);\n    }\n  }\n  static repeat(target, count, subclass) {\n    let scenario = {};\n    if (count < 1) {\n      scenario = subclass;\n    }\n    else {\n      scenario[target] = subclass;\n      count--;\n      while (count-- > 0) {\n        scenario = {\n          [target]: scenario\n        };\n      }\n    }\n    return scenario;\n  }\n  static * _permute(targets, i = 0, result = {}, subclass = (list) => list.join('Then')) {\n    let len = targets.length;\n    let j;\n    function swap() {\n      if (j !== i) {\n        let tmp = targets[i];\n        targets[i] = targets[j];\n        targets[j] = tmp;\n      }\n    }\n    function append() {\n      // TODO: cache cursor\n      let cursor = result;\n      for (let k = 0; k < len; k++) {\n        if (!cursor[targets[k]]) {\n          if (k >= len - 1) {\n            cursor[targets[k]] = subclass(targets);\n          }\n          else {\n            cursor[targets[k]] = {};\n          }\n        }\n        cursor = cursor[targets[k]];\n      }\n    }\n    if (i >= len - 1) {\n      yield targets;\n      append();\n    }\n    else {\n      for (j = i; j < len; j++) {\n        swap();\n        for (let sub of this._permute(targets, i + 1, result)) {\n          yield targets;\n          append();\n        }\n        swap();\n      }\n    }\n  }\n  static permute(targets, subclass) {\n    let result = {};\n    for (let chain of this._permute(targets, 0, result, subclass)) {}\n    return result;\n  }\n  async setup() {\n  }\n  forEvent(element, type, trigger, condition) {\n    return new Promise(resolve => {\n      element.addEventListener(type, function onEvent(event) {\n        if (!condition ||\n            (typeof condition === 'boolean' && condition && Polymer.dom(event).rootTarget === element) ||\n            (typeof condition === 'function' && condition(element, type, event))) {\n          element.removeEventListener(type, onEvent);\n          resolve(event);\n        }\n      });\n      if (trigger) {\n        trigger();\n      }\n    })\n  }\n  * scenario() {\n    // trick to unveil overridden methods\n    let steps = [];\n    let proto = Object.getPrototypeOf(this);\n    while (proto.constructor.name && proto.constructor.name !== 'Object') {\n      steps.unshift({\n        name: proto.hasOwnProperty('description') ? proto.description : this.uncamel(proto.constructor.name),\n        iteration: proto.hasOwnProperty('iteration') ? proto.iteration : undefined,\n        operation: proto.hasOwnProperty('operation') ? proto.operation : undefined,\n        checkpoint: proto.hasOwnProperty('checkpoint') ? proto.checkpoint: undefined\n      });\n      proto = Object.getPrototypeOf(proto);\n    }\n    yield * steps;\n  }\n  async teardown() {\n  }\n  async run(classes, target) {\n    // TODO: return a Promise object?\n    let self = this;\n    if (self.constructor.name === 'Suite') {\n      // Suite Runner\n      let testSuites = [];\n      if (typeof classes === 'number' || typeof classes === 'string') {\n        // Number 0\n        // Number string '0'\n        // CSV string 'Test1,Test2'\n        testSuites = self.testClasses(classes);\n      }\n      else if (typeof classes === 'object' && Array.isArray(classes)) {\n        // String Array [ 'Test1', 'Test2' ]\n        // Class Array [ Test1, Test2 ]\n        // TODO: handle errors if item is neither a string nor a class\n        testSuites = classes.map((item) => typeof item === 'string' ? self.classes[item] : item);\n      }\n      else if (typeof classes === 'object' && !Array.isArray(classes) && classes) {\n        // Object { Test1: Test1, Test2: Test2 } - property names are discarded\n        for (let c in classes) {\n          testSuites.push(classes[c]);\n        }\n      }\n      suite(self.description || (self.scope + ' suite'), function() {\n        // Note: Not waiting for async forEach so that each subsuite runs under the parent suite\n        Promise.all(testSuites.map(async (s) => (new s(target)).run()))\n          .then(() => {\n            console.log(self.description + ' done for ', classes);\n          });\n      });\n    }\n    else {\n      // Scenario Runner\n      suite(Object.getOwnPropertyDescriptor(Object.getPrototypeOf(self), 'description') ? self.description : self.uncamel(self.constructor.name), async function () {\n        suiteSetup(async function () {\n          await self.setup();\n        });\n\n        for (let step of self.scenario()) {\n          if (step.operation || step.checkpoint) {\n            if (step.iteration) {\n              // suite() has to be commented out since subsuites are executed after all the other sibling tests\n              //suite(step.name + ' iterations', async function () {\n                for (let parameters of step.iteration.apply(self)) {\n                  test(parameters.name ?\n                        (typeof parameters.name === 'function' ? parameters.name(parameters) : parameters.name)\n                        : step.name, async function() {\n                    if (self.constructor.skipAfterFailure && self.__failed) {\n                      this.skip();\n                      return;\n                    }\n                    self.__failed = true;\n                    if (step.operation) {\n                      await step.operation.call(self, parameters);\n                    }\n                    if (step.checkpoint) {\n                      await step.checkpoint.call(self, parameters);\n                    }\n                    self.__failed = false;\n                  });\n                }\n              //});\n            }\n            else {\n              test(step.name, async function() {\n                if (self.constructor.skipAfterFailure && self.__failed) {\n                  this.skip();\n                  return;\n                }\n                self.__failed = true;\n                if (step.operation) {\n                  await step.operation.call(self);\n                }\n                if (step.checkpoint) {\n                  await step.checkpoint.call(self);\n                }\n                self.__failed = false;\n              });\n            }\n          }\n        }\n\n        suiteTeardown(async function () {\n          await self.teardown();\n        });\n      });\n    }\n  }\n}\n\n  return Suite;\n})); // UMD Definition\n"]}